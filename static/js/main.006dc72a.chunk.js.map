{"version":3,"sources":["api.js","Network.js","NetworkSelect.js","NetworkInfo.js","Trustline.js","Account.js","App.js","serviceWorker.js","index.js"],"names":["fetch_endpoint","url","a","fetch","json","build_graph","event_list","nodes","Set","edges","e","type","addresses","from","to","address","add","address1","address2","vis_nodes","vis_edges","node","push","id","label","slice","Object","values","edge","options","autoResize","height","width","interaction","selectConnectedEdges","Network","onSelectTrustline","onSelectAccount","container","useRef","useState","loading","setLoading","network","setNetwork","useEffect","setData","process","events","data","vis","DataSet","new_network","current","off","on","params","length","tl_data","get","trustline","_fetch","style","className","ref","NetworkSelect","onNetworkSelect","networks","setNetworks","map","onClick","key","name","NetworkInfo","abbreviation","numUsers","format_num","value","num","BigNumber","div","pow","decimals","Trustline","setTrustline","user","counterParty","given","received","balance","Account","account","setAccount","leftReceived","App","handleSelectNetwork","useCallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.006dc72a.chunk.js","sourcesContent":["export async function fetch_endpoint(url) {\n  return (await fetch(url)).json()\n}\n","import React, { useEffect, useRef, useState } from \"react\"\nimport vis from \"vis-network\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nfunction build_graph(event_list) {\n  const nodes = new Set()\n  const edges = {}\n\n  for (const e of event_list) {\n    if (e.type === \"TrustlineUpdate\") {\n      const addresses = [e.from, e.to]\n      for (const address of addresses) {\n        nodes.add(address)\n      }\n\n      let [address1, address2] = addresses\n      if (address2 < address1) {\n        ;[address1, address2] = [address2, address1]\n      }\n\n      edges[[address1, address2]] = { from: address1, to: address2 }\n    }\n  }\n  const vis_nodes = []\n  const vis_edges = []\n  for (const node of nodes) {\n    vis_nodes.push({ id: node, label: node.slice(0, 7) })\n  }\n  for (const edge of Object.values(edges)) {\n    vis_edges.push(edge)\n  }\n  return [vis_nodes, vis_edges]\n}\n\nconst options = {\n  autoResize: true,\n  height: \"100%\",\n  width: \"100%\",\n  interaction: {\n    selectConnectedEdges: false,\n  },\n}\n\nfunction Network({ address, onSelectTrustline, onSelectAccount }) {\n  const container = useRef(null)\n  const [loading, setLoading] = useState(true)\n  const [network, setNetwork] = useState(null)\n\n  useEffect(() => {\n    async function _fetch() {\n      network && network.setData({})\n      setLoading(true)\n      const events = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL + `/api/v1/networks/${address}/events`\n      )\n      const [nodes, edges] = build_graph(events)\n      const data = {\n        nodes: new vis.DataSet(nodes),\n        edges: new vis.DataSet(edges),\n      }\n      let new_network\n      if (network) {\n        network.setData(data)\n        new_network = network\n      } else {\n        new_network = new vis.Network(container.current, data, options)\n        setNetwork(new_network)\n      }\n      new_network.off(\"selectEdge\")\n      new_network.off(\"selectNode\")\n      new_network.off(\"deselectEdge\")\n      new_network.off(\"deselectNode\")\n      new_network.on(\"selectEdge\", function(params) {\n        if (params.edges.length !== 1 || params.nodes.length !== 0) {\n          return\n        }\n        const tl_data = data.edges.get(params.edges[0])\n        const trustline = {\n          network: address,\n          from: tl_data[\"from\"],\n          to: tl_data[\"to\"],\n        }\n        onSelectTrustline(trustline)\n      })\n      new_network.on(\"selectNode\", function(params) {\n        if (params.nodes.length !== 1) {\n          return\n        }\n        onSelectAccount(params.nodes[0])\n      })\n      new_network.on(\"deselectEdge\", function(params) {\n        onSelectTrustline(null)\n      })\n      new_network.on(\"deselectNode\", function(params) {\n        onSelectAccount(null)\n      })\n      setLoading(false)\n    }\n\n    _fetch()\n  }, [network, address, onSelectTrustline, onSelectAccount])\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      {loading && <div className={\"has-text-centered\"}>loading...</div>}\n      <div style={{ width: \"100%\", height: \"100%\" }} ref={container} />\n    </div>\n  )\n}\n\nexport default Network\n","import React, { useEffect, useState } from \"react\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nimport \"./NetworkSelect.css\"\n\nfunction NetworkSelect({ onNetworkSelect }) {\n  const [networks, setNetworks] = useState([])\n\n  useEffect(() => {\n    async function _fetch() {\n      const networks = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL + `/api/v1/networks`\n      )\n      setNetworks(networks)\n    }\n    _fetch()\n  }, [])\n\n  return (\n    <div className={\"list is-hoverable my-list\"}>\n      {networks.map(network => (\n        <a\n          onClick={() => onNetworkSelect(network)}\n          className={\"list-item\"}\n          key={network.address}\n        >\n          {network.name}\n        </a>\n      ))}\n    </div>\n  )\n}\n\nexport default NetworkSelect\n","import React from \"react\"\n\nfunction NetworkInfo({ network }) {\n  return (\n    <div>\n      <div className={\"title\"}>\n        {network.name} ({network.abbreviation})\n      </div>\n      <div className={\"subtitle\"}>{network.numUsers} Users</div>\n    </div>\n  )\n}\n\nexport default NetworkInfo\n","import React, { useEffect, useState } from \"react\"\nimport BigNumber from \"bignumber.js\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nfunction format_num(value, network) {\n  const num = new BigNumber(value).div(new BigNumber(10).pow(network.decimals))\n  return `${num} ${network.abbreviation}`\n}\n\nfunction Trustline({ network, from, to }) {\n  const [trustline, setTrustline] = useState({})\n\n  useEffect(() => {\n    async function _fetch() {\n      const trustline = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL +\n          `/api/v1/networks/${network.address}/users/${from}/trustlines/${to}`\n      )\n      setTrustline(trustline)\n    }\n    _fetch()\n  }, [network, from, to])\n\n  return (\n    <div>\n      <div className={\"title\"}>Trustline Details</div>\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th>from</th>\n            <td>{trustline.user}</td>\n          </tr>\n          <tr>\n            <th>to</th>\n            <td>{trustline.counterParty}</td>\n          </tr>\n          <tr>\n            <th>Credit given</th>\n            <td>{format_num(trustline.given, network)}</td>\n          </tr>\n          <tr>\n            <th>Credit received</th>\n            <td>{format_num(trustline.received, network)}</td>\n          </tr>\n          <tr>\n            <th>Balance</th>\n            <td>{format_num(trustline.balance, network)}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Trustline\n","import React, { useEffect, useState } from \"react\"\nimport BigNumber from \"bignumber.js\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nfunction format_num(value, network) {\n  if (value == null) {\n    return \"...\"\n  }\n  const num = new BigNumber(value).div(new BigNumber(10).pow(network.decimals))\n  return `${num} ${network.abbreviation}`\n}\n\nfunction Account({ network, address }) {\n  const [account, setAccount] = useState({})\n\n  useEffect(() => {\n    async function _fetch() {\n      const account = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL +\n          `/api/v1/networks/${network.address}/users/${address}`\n      )\n      setAccount(account)\n    }\n    _fetch()\n  }, [network, address])\n\n  return (\n    <div>\n      <div className={\"title\"}>Account Details</div>\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th>User</th>\n            <td>{address}</td>\n          </tr>\n          <tr>\n            <th>Credit given</th>\n            <td>{format_num(account.given, network)}</td>\n          </tr>\n          <tr>\n            <th>Credit received</th>\n            <td>{format_num(account.received, network)}</td>\n          </tr>\n          <tr>\n            <th>Balance</th>\n            <td>{format_num(account.balance, network)}</td>\n          </tr>\n          <tr>\n            <th>Available</th>\n            <td>{format_num(account.leftReceived, network)}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Account\n","import React, { useCallback, useState } from \"react\"\n\nimport Network from \"./Network\"\nimport NetworkSelect from \"./NetworkSelect\"\nimport NetworkInfo from \"./NetworkInfo\"\nimport Trustline from \"./Trustline\"\nimport Account from \"./Account\"\n\nimport \"bulma/css/bulma.css\"\nimport \"./App.css\"\n\nfunction App() {\n  const [network, setNetwork] = useState(null)\n  const [trustline, setTrustline] = useState(null)\n  const [account, setAccount] = useState(null)\n\n  const handleSelectNetwork = useCallback(network => {\n    setTrustline(null)\n    setAccount(null)\n    setNetwork(network)\n  }, [])\n\n  return (\n    <div className={\"mycontainer columns\"}>\n      <div className={\"column is-one-quarter\"}>\n        <NetworkSelect onNetworkSelect={handleSelectNetwork} />\n      </div>\n      <div className={\"column is-one-half\"}>\n        {network && <NetworkInfo network={network} />}\n        {network ? (\n          <Network\n            address={network.address}\n            onSelectTrustline={setTrustline}\n            onSelectAccount={setAccount}\n          />\n        ) : (\n          <div className={\"has-text-centered\"}>Select a network</div>\n        )}\n      </div>\n      <div className={\"column is-one-quarter\"}>\n        {trustline ? (\n          <Trustline\n            network={network}\n            from={trustline.from}\n            to={trustline.to}\n          />\n        ) : (\n          <div className={\"has-text-centered\"}>Select a trustline</div>\n        )}\n        <br />\n        <br />\n        {account ? (\n          <Account network={network} address={account} />\n        ) : (\n          <div className={\"has-text-centered\"}>Select an account</div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}