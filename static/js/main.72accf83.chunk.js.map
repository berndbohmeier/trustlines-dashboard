{"version":3,"sources":["api.js","NetworkInfo.js","DiffTime.js","d3Chart.js","Network.js","frozenNetworks.js","NetworkSelect.js","Trustline.js","Account.js","App.js","serviceWorker.js","index.js"],"names":["fetch_endpoint","url","a","fetch","json","NetworkInfo","networkStatic","numUsers","numTransfers","className","name","abbreviation","DiffTime","timestamp","useState","diffTimeString","setDiffTimeString","useEffect","_update","moment","fromNow","id","setInterval","clearInterval","format","d3","require","isDragging","selectedNodeId","selectedLinkId","chart","data","networkAddress","onSelectTrustline","onSelectAccount","length","linksData","links","map","d","Object","create","nodesData","nodes","simulation","forceSimulation","force","forceLink","distance","forceManyBody","forceX","forceY","select","remove","svg","append","attr","call","zoom","on","event","transform","selectAll","join","drag","active","alphaTarget","restart","fx","x","fy","y","i","index","style","link_d","nodeId","this","console","log","__proto__","source","target","tl_data","trustline","network","from","to","text","node","filterEvents","eventList","eventName2list","result","values","e","type","push","build_graph","trustlineUpdateEvents","Set","edges","addresses","address","add","address1","address2","vis_nodes","vis_edges","label","slice","edge","Network","loadingPercent","setLoadingPercent","graph","setGraph","setNumTransfers","setNumUsers","lastUpdateTimestamp","setLastUpdateTimestamp","fetchData","networkGraph","finishedLoading","fromBlock","process","events","Date","now","eventMap","TrustlineUpdate","Transfer","newGraph","transferEvents","blockNumber","_fetchMoreData","startFetchData","height","minHeight","onClick","width","frozenNetworks","NetworkSelect","onNetworkSelect","networks","setNetworks","selectedAddress","setSelectedAddress","_fetch","filter","includes","sort","networkA","networkB","selectNetwork","useCallback","key","format_num","value","num","BigNumber","div","pow","decimals","Trustline","setTrustline","user","counterParty","given","received","balance","Account","account","setAccount","leftReceived","relativeTimeThreshold","App","setNetwork","handleSelectNetwork","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72accf83.chunk.js","sourcesContent":["export async function fetch_endpoint(url) {\n  return (await fetch(url)).json()\n}\n","import React from \"react\"\n\nfunction NetworkInfo({ networkStatic, numUsers, numTransfers }) {\n  return (\n    <div>\n      <div className={\"title\"}>\n        {networkStatic.name} ({networkStatic.abbreviation})\n      </div>\n      <div className={\"subtitle\"}>\n        {numUsers} Users, {numTransfers} Transfers\n      </div>\n    </div>\n  )\n}\n\nexport default NetworkInfo\n","import React, { useEffect, useState } from \"react\"\n\nimport moment from \"moment\"\n\nfunction DiffTime({ timestamp }) {\n  const [diffTimeString, setDiffTimeString] = useState(\"\")\n\n  useEffect(() => {\n    function _update() {\n      setDiffTimeString(moment(timestamp).fromNow())\n    }\n    _update()\n    const id = setInterval(_update, 1000)\n    return () => clearInterval(id)\n  }, [timestamp])\n\n  return (\n    timestamp && (\n      <span>\n        {moment(timestamp).format(\"hh:mm:ss\")}({diffTimeString})\n      </span>\n    )\n  )\n}\n\nexport default DiffTime\n","const d3 = require(\"d3\")\n\nconst height = 1024\nconst width = 1024\n\nlet isDragging = false\nlet selectedNodeId = null\nlet selectedLinkId = null\n\nconst drag = (simulation) => {\n  function dragstarted(event, d) {\n    isDragging = true\n    if (!event.active) simulation.alphaTarget(0.3).restart()\n    d.fx = d.x\n    d.fy = d.y\n  }\n\n  function dragged(event, d) {\n    d.fx = event.x\n    d.fy = event.y\n  }\n\n  function dragended(event, d) {\n    isDragging = false\n    if (!event.active) simulation.alphaTarget(0)\n    d.fx = null\n    d.fy = null\n  }\n\n  return d3\n    .drag()\n    .on(\"start\", dragstarted)\n    .on(\"drag\", dragged)\n    .on(\"end\", dragended)\n}\n\nexport function chart(\n  data,\n  networkAddress,\n  onSelectTrustline,\n  onSelectAccount\n) {\n  if (data.length === 0) {\n    return\n  }\n  const linksData = data.links.map((d) => Object.create(d))\n  const nodesData = data.nodes.map((d) => Object.create(d))\n\n  const simulation = d3\n    .forceSimulation(nodesData)\n    .force(\n      \"link\",\n      d3\n        .forceLink(linksData)\n        .id((d) => d.id)\n        .distance(function (d) {\n          return 60\n        })\n    )\n    .force(\"charge\", d3.forceManyBody())\n    .force(\"x\", d3.forceX())\n    .force(\"y\", d3.forceY())\n\n  d3.select(\"svg\").remove()\n\n  const svg = d3\n    .select(\"#svgContainer\")\n    .append(\"svg\")\n    .attr(\"width\", \"100%\")\n    .attr(\"height\", \"100%\")\n    .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n    .call(\n      d3.zoom().on(\"zoom\", function (event) {\n        svg.attr(\"transform\", event.transform)\n      })\n    )\n    .append(\"g\")\n\n  const links = svg\n    .append(\"g\")\n    .attr(\"stroke\", \"#999\")\n    .attr(\"stroke-opacity\", 0.6)\n    .selectAll(\"line\")\n    .data(linksData)\n    .join(\"line\")\n    .attr(\"stroke-width\", 2)\n  const nodes = svg\n    .append(\"g\")\n    .attr(\"stroke\", \"#fff\")\n    .attr(\"stroke-width\", 1.5)\n    .selectAll(\"circle\")\n    .data(nodesData)\n    .join(\"circle\")\n    .attr(\"r\", 5)\n    .attr(\"fill\", \"#69b3b2\")\n    .call(drag(simulation))\n\n  nodes.on(\"click\", (d, i) => {\n    selectedNodeId = data.nodes[i.index].id\n    nodes.style(\"fill\", (link_d) => {\n      return link_d.id === selectedNodeId ? \"red\" : \"#b8b8b8\"\n    })\n\n    onSelectAccount(selectedNodeId)\n  })\n\n  nodes\n    .on(\"mouseover\", function (event, d) {\n      if (isDragging) {\n        return false\n      }\n      // Highlight the nodes: every node is green except of him\n      nodes.style(\"fill\", (nodeId) => {\n        if (selectedNodeId === null) {\n          return \"#B8B8B8\"\n        }\n        return nodeId.id === selectedNodeId ? \"red\" : \"#B8B8B8\"\n      })\n      d3.select(this).style(\"fill\", \"#69b3b2\")\n      // Highlight the connections\n      links\n        .style(\"stroke\", function (link_d) {\n          console.log('stroke', link_d)\n          return link_d.__proto__.source === d.id ||\n            link_d.__proto__.target === d.id\n            ? \"#69b3b2\"\n            : \"#b8b8b8\"\n        })\n        .style(\"stroke-width\", function (link_d) {\n          return link_d.source === d.id ||\n            link_d.target === d.id\n            ? 2\n            : 1\n        })\n    })\n    .on(\"mouseout\", function (event, d) {\n      if (isDragging) {\n        return false\n      }\n      nodes.style(\"fill\", (nodeId) => {\n        if (selectedNodeId === null) {\n          return \"#69b3b2\"\n        }\n        return nodeId.id === selectedNodeId ? \"red\" : \"#69b3b2\"\n      })\n      links\n        .style(\"stroke\", (link_d) => {\n          return selectedLinkId === link_d.id ? \"red\" : \"black\"\n        })\n        .style(\"stroke-width\", \"1\")\n    })\n\n  links.on(\"click\", (d, i) => {\n    const tl_data = data.links[i.index]\n    selectedLinkId = tl_data.id\n    const trustline = {\n      network: networkAddress,\n      from: tl_data[\"source\"],\n      to: tl_data[\"target\"],\n    }\n\n    links.style(\"stroke\", (link_d) => {\n      return selectedLinkId === link_d.id ? \"red\" : \"black\"\n    })\n\n    onSelectTrustline(trustline)\n  })\n\n  nodes.append(\"title\").text((d) => d.id)\n\n  simulation.on(\"tick\", () => {\n    links\n      .attr(\"x1\", (d) => d.source.x)\n      .attr(\"y1\", (d) => d.source.y)\n      .attr(\"x2\", (d) => d.target.x)\n      .attr(\"y2\", (d) => d.target.y)\n\n    nodes.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y)\n  })\n\n  return svg.node()\n}\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { fetch_endpoint } from \"./api.js\"\n\nimport \"./Network.css\"\nimport NetworkInfo from \"./NetworkInfo\"\nimport DiffTime from \"./DiffTime\"\nimport { chart } from \"./d3Chart\"\n\nfunction filterEvents(eventList, eventName2list) {\n  const result = {}\n  for (const eventListName of Object.values(eventName2list)) {\n    result[eventListName] = []\n  }\n  for (const e of eventList) {\n    if (eventName2list[e.type]) {\n      result[eventName2list[e.type]].push(e)\n    }\n  }\n  return result\n}\n\nfunction build_graph(trustlineUpdateEvents) {\n  const nodes = new Set()\n  const edges = {}\n\n  for (const e of trustlineUpdateEvents) {\n    const addresses = [e.from, e.to]\n    for (const address of addresses) {\n      nodes.add(address)\n    }\n\n    let [address1, address2] = addresses\n    if (address2 < address1) {\n      ;[address1, address2] = [address2, address1]\n    }\n\n    edges[[address1, address2]] = {\n      id: address1 + address2,\n      source: address1,\n      target: address2,\n    }\n  }\n  const vis_nodes = []\n  const vis_edges = []\n  for (const node of nodes) {\n    vis_nodes.push({ id: node, label: node.slice(0, 7) })\n  }\n\n  for (const edge of Object.values(edges)) {\n    vis_edges.push(edge)\n  }\n  return [vis_nodes, vis_edges]\n}\n\nfunction Network({ network, onSelectTrustline, onSelectAccount }) {\n  const [loadingPercent, setLoadingPercent] = useState(0)\n  const [graph, setGraph] = useState({ links: [], nodes: [] })\n\n  const [numTransfers, setNumTransfers] = useState(null)\n  const [numUsers, setNumUsers] = useState(null)\n\n  const [lastUpdateTimestamp, setLastUpdateTimestamp] = useState(null)\n\n  function fetchData() {\n    let networkGraph = { links: [], nodes: [] }\n    setLoadingPercent(0)\n    setNumTransfers(0)\n    setNumUsers(0)\n    let finishedLoading = true\n\n    function startFetchData() {\n      let fromBlock = 0\n\n      async function _fetchMoreData() {\n        if (!finishedLoading) {\n          console.log(\"Skip fetching, because old still in progress\")\n          return\n        }\n        finishedLoading = false\n        console.log(\"Fetch events from block \", fromBlock)\n        let events = await fetch_endpoint(\n          process.env.REACT_APP_RELAY_URL +\n            `/api/v1/networks/${network.address}/events?fromBlock=${fromBlock}`\n        )\n\n        if (events.length === 0) {\n          console.log(\"No new events\")\n          setLastUpdateTimestamp(Date.now())\n          finishedLoading = true\n          return\n        }\n        const eventMap = filterEvents(events, {\n          TrustlineUpdate: \"trustlineUpdateEvents\",\n          Transfer: \"transferEvents\",\n        })\n        const [nodes, edges] = build_graph(eventMap.trustlineUpdateEvents)\n\n        const newGraph = {\n          links: [...networkGraph.links, ...edges],\n          nodes: [...networkGraph.nodes, ...nodes],\n        }\n        networkGraph = newGraph\n        finishedLoading = true\n        setGraph(newGraph)\n\n        setNumTransfers(\n          (numTransfers) => numTransfers + eventMap.transferEvents.length\n        )\n        setNumUsers(networkGraph.nodes.length)\n        setLastUpdateTimestamp(Date.now())\n        fromBlock = events[events.length - 1].blockNumber + 1\n        setLoadingPercent(100)\n      }\n\n      return _fetchMoreData()\n    }\n\n    startFetchData()\n  }\n\n  useEffect(fetchData, [network])\n\n  useEffect(() => {\n    chart(graph, network.address, onSelectTrustline, onSelectAccount)\n  }, [graph, network, onSelectTrustline, onSelectAccount])\n\n  return (\n    <div style={{height: \"90%\"}}>\n      <div style={{minHeight: \"100px\"}}>\n        {loadingPercent !== 100 ? (\n            \"Loading...\"\n        ) : (\n            <>\n              <NetworkInfo\n                  networkStatic={network}\n                  numUsers={numUsers}\n                  numTransfers={numTransfers}\n              />\n              last updated: <DiffTime timestamp={lastUpdateTimestamp} />{\" \"}\n              <a onClick={() => fetchData()}>Click here to update.</a>\n            </>\n        )}\n      </div>\n      <div style={{ width: \"100%\", height: \"100%\" }} id=\"svgContainer\"></div>\n    </div>\n  )\n}\n\nexport default Network\n","// those networks were frozen on the 15.02.2021 and we\n// no longer need to show stats for them\nexport const frozenNetworks = [\n  \"0x12657128d7fa4291647eC3b0147E5fA6EebD388A\",\n  \"0xF2320a5371DA3CB967B9355597AA7adEc17E4220\",\n  \"0x18BDC736b23Ff7294BED9fa988a1443357C7B0ed\",\n  \"0x0A6f0C541Be542c098B7Ee03C9C634f20BCf8422\",\n  \"0x01564a4b7C327c84763D7fCf629B02584AE72973\",\n  \"0x8B2c0e43F69a8a25c94510cC85138260bb24e381\",\n  \"0x7A6049b3A96E7a6D68e6e6813a19594Ea336d080\",\n  \"0xB57C960Ee760cDa8184C9C9d9b7D0FeBE4557616\",\n  \"0x8306e229ea6Edf3aD2670681912CcC0C338f7963\",\n  \"0x70d4db4eC56b398D7cbA3666835490cb0e39f008\",\n  \"0x049D814ED22bEA4394aC2Ec48bace8A1e31BC376\",\n  \"0xc3790A6df080381ebf3eF9BeB35e6b70431bB420\",\n  \"0xa81DE4DA252E012a5e8b0Fe1FE91BB0a55Dc5f9d\",\n  \"0xB365694dB0961Fe81cA5e296c1250d24a4Ee627f\",\n  \"0x1A64Bd5e956DA93E912CB7eb9b00B8D2Bc9015F9\",\n  \"0x714dabD79B7962dA47c8fEA446064523CE0456fE\",\n  \"0xC0f1030d83AEEF1616deef060114E31B3A25De81\",\n  \"0x15933718E2e3478e756C13d516f7f4f4F749b3D6\",\n  \"0x77626459240b8105DeC70dC97D61441924f166Df\",\n  \"0x264B1775Ce5d2831608575974CfB9EB9F8F659f5\",\n  \"0xb2B3A0E958e3eEb333b734ABF34ACA2dB5b94B8F\",\n  \"0xA31fA3D8DaEBc1d7fb91a6F5F6805873dC958Ff2\",\n  \"0x603f22B1D3854b985E0a61Ce4c0349534a0e5673\",\n  \"0x5F74eD72158566c05328Eb815544461bD0b45116\",\n  \"0x7Ac3fC1C428df99D81d9b644106FF67c44A155aA\",\n  \"0xef5bC01da9AC8B32F78dC847D84454E48510Ef72\",\n  \"0x97668E07c122f7701b804A4eA6fd196F1e264423\",\n  \"0x57c4a2cCF2CC99f3dF7855465d1528C110Ff4F14\",\n  \"0xa809D5e740AA324FF94751836b1d7Aa6BA2de81E\",\n  \"0xF455c46823Cdb5A899217A0f085525874bA194A8\",\n  \"0xc8a0a3aA3A98F27198De126379386D8aA7D01950\",\n  \"0xCaa5B04e6E44EC3106EEBdAAd7D6C7bE9370Be32\",\n  \"0x2421A2ea7B24b5D26177B78afcf8F4B40255324d\",\n  \"0x2aB3f469D041aE68F45b3C255B7CB46370FfffF5\",\n  \"0x03FE2A6a589e33b7d3cD8208705092BE572A76d1\",\n  \"0xFe54Cbb23414467CcC052dACA1ecc908745D71Eb\",\n  \"0x4D4dd71A818D4F7d3349F936382ea70979123F81\",\n  \"0xCC6039e0681548002bcF39bf65d444beD65980B0\",\n  \"0x821b770a4b5D1228322B2A2Bb29354b5faabD29F\",\n  \"0x86D50E94e6Ba4B99C5c19439c13a07E5B7c231f9\",\n  \"0x6212C2783B2acCA8468b1befb19a4aAccb3c4970\",\n  \"0x4B1Ce992B04539786DF19dDC416490cd6595DB01\",\n  \"0x8588173E0322089Efe851b14d041aC15AC991C07\",\n  \"0xcb02a08a72Cb459fE41E987065fE1E2D7438E64E\",\n  \"0x0FbD56e384826246dC795C1A1951c781184F8faa\",\n]\n","import React, { useCallback, useEffect, useState } from \"react\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nimport \"./NetworkSelect.css\"\nimport { frozenNetworks } from \"./frozenNetworks\"\n\nfunction NetworkSelect({ onNetworkSelect }) {\n  const [networks, setNetworks] = useState([])\n  const [selectedAddress, setSelectedAddress] = useState(null)\n\n  useEffect(() => {\n    async function _fetch() {\n      let networks = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL + `/api/v1/networks`\n      )\n\n      networks = networks.filter(\n        (network) => !frozenNetworks.includes(network.address)\n      )\n\n      networks.sort(\n        (networkA, networkB) => networkB.numUsers - networkA.numUsers\n      )\n      setNetworks(networks)\n    }\n    _fetch()\n    const id = setInterval(_fetch, 10000)\n    return () => clearInterval(id)\n  }, [])\n\n  const selectNetwork = useCallback(\n    (network) => {\n      setSelectedAddress(network.address)\n      onNetworkSelect(network)\n    },\n    [onNetworkSelect, setSelectedAddress]\n  )\n\n  return (\n    <aside className={\"menu my-menu\"}>\n      <p className={\"menu-label\"}>Networks</p>\n      <ul>\n        {networks.map((network) => (\n          <li key={network.address}>\n            <a\n              onClick={() => selectNetwork(network)}\n              className={\n                \"list-item \" +\n                (selectedAddress === network.address ? \"is-active\" : \"\")\n              }\n            >\n              {network.name} ({network.numUsers})\n            </a>\n          </li>\n        ))}\n      </ul>\n    </aside>\n  )\n}\n\nexport default NetworkSelect\n","import React, { useEffect, useState } from \"react\"\nimport BigNumber from \"bignumber.js\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nfunction format_num(value, network) {\n  const num = new BigNumber(value).div(new BigNumber(10).pow(network.decimals))\n  return `${num} ${network.abbreviation}`\n}\n\nfunction Trustline({ network, from, to }) {\n  const [trustline, setTrustline] = useState({})\n\n  useEffect(() => {\n    async function _fetch() {\n      const trustline = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL +\n          `/api/v1/networks/${network.address}/users/${from}/trustlines/${to}`\n      )\n      setTrustline(trustline)\n    }\n    _fetch()\n  }, [network, from, to])\n\n  return (\n    <div>\n      <div className={\"title\"}>Trustline Details</div>\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th>from</th>\n            <td>{trustline.user}</td>\n          </tr>\n          <tr>\n            <th>to</th>\n            <td>{trustline.counterParty}</td>\n          </tr>\n          <tr>\n            <th>Credit given</th>\n            <td>{format_num(trustline.given, network)}</td>\n          </tr>\n          <tr>\n            <th>Credit received</th>\n            <td>{format_num(trustline.received, network)}</td>\n          </tr>\n          <tr>\n            <th>Balance</th>\n            <td>{format_num(trustline.balance, network)}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Trustline\n","import React, { useEffect, useState } from \"react\"\nimport BigNumber from \"bignumber.js\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nfunction format_num(value, network) {\n  if (value == null) {\n    return \"...\"\n  }\n  const num = new BigNumber(value).div(new BigNumber(10).pow(network.decimals))\n  return `${num} ${network.abbreviation}`\n}\n\nfunction Account({ network, address }) {\n  const [account, setAccount] = useState({})\n\n  useEffect(() => {\n    async function _fetch() {\n      const account = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL +\n          `/api/v1/networks/${network.address}/users/${address}`\n      )\n      setAccount(account)\n    }\n    _fetch()\n  }, [network, address])\n\n  return (\n    <div>\n      <div className={\"title\"}>Account Details</div>\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th>User</th>\n            <td>{address}</td>\n          </tr>\n          <tr>\n            <th>Credit given</th>\n            <td>{format_num(account.given, network)}</td>\n          </tr>\n          <tr>\n            <th>Credit received</th>\n            <td>{format_num(account.received, network)}</td>\n          </tr>\n          <tr>\n            <th>Balance</th>\n            <td>{format_num(account.balance, network)}</td>\n          </tr>\n          <tr>\n            <th>Available</th>\n            <td>{format_num(account.leftReceived, network)}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Account\n","import React, { useCallback, useState } from \"react\"\nimport moment from \"moment\"\n\nimport Network from \"./Network\"\nimport NetworkSelect from \"./NetworkSelect\"\nimport Trustline from \"./Trustline\"\nimport Account from \"./Account\"\n\nimport \"bulma/css/bulma.css\"\nimport \"./App.css\"\n\nmoment.relativeTimeThreshold(\"ss\", 10)\n\nfunction App() {\n  const [network, setNetwork] = useState(null)\n  const [trustline, setTrustline] = useState(null)\n  const [account, setAccount] = useState(null)\n\n  const handleSelectNetwork = useCallback((network) => {\n    setTrustline(null)\n    setAccount(null)\n    setNetwork(network)\n  }, [])\n\n  return (\n    <div className={\"mycontainer columns\"}>\n      <div className={\"column is-narrow\"}>\n        <NetworkSelect onNetworkSelect={handleSelectNetwork} />\n      </div>\n      <div className={\"column is-three-quarter\"}>\n        {network ? (\n          <Network\n            network={network}\n            onSelectTrustline={setTrustline}\n            onSelectAccount={setAccount}\n          />\n        ) : (\n          <div className={\"has-text-centered\"}>Select a network</div>\n        )}\n      </div>\n      <div className={\"column is-one-quarter\"}>\n        {trustline ? (\n          <Trustline\n            network={network}\n            from={trustline.from}\n            to={trustline.to}\n          />\n        ) : (\n          <div className={\"has-text-centered\"}>Select a trustline</div>\n        )}\n        <br />\n        <br />\n        {account ? (\n          <Account network={network} address={account} />\n        ) : (\n          <div className={\"has-text-centered\"}>Select an account</div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}