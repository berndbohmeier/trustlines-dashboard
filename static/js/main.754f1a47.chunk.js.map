{"version":3,"sources":["api.js","NetworkInfo.js","DiffTime.js","Network.js","NetworkSelect.js","Trustline.js","Account.js","App.js","serviceWorker.js","index.js"],"names":["fetch_endpoint","url","a","fetch","json","NetworkInfo","networkStatic","numUsers","numTransfers","className","name","abbreviation","DiffTime","timestamp","useState","diffTimeString","setDiffTimeString","useEffect","_update","moment","fromNow","id","setInterval","clearInterval","format","filterEvents","eventList","eventName2list","result","Object","values","e","type","push","build_graph","trustlineUpdateEvents","nodes","Set","edges","addresses","from","to","address","add","address1","address2","vis_nodes","vis_edges","node","label","slice","edge","options","autoResize","height","width","interaction","selectConnectedEdges","Network","network","onSelectTrustline","onSelectAccount","container","useRef","loadingPercent","setLoadingPercent","visNetwork","setVisNetwork","setNumTransfers","setNumUsers","lastUpdateTimestamp","setLastUpdateTimestamp","vis","current","off","on","params","length","tl_data","body","data","get","trustline","Math","floor","iterations","total","console","log","setData","nodeSet","edgeSet","finishedLoading","intervalId","fromBlock","_fetchMoreData","process","events","Date","now","eventMap","TrustlineUpdate","Transfer","DataSet","once","update","transferEvents","blockNumber","startFetchData","style","value","max","ref","NetworkSelect","onNetworkSelect","networks","setNetworks","selectedAddress","setSelectedAddress","_fetch","sort","networkA","networkB","selectNetwork","useCallback","map","key","onClick","format_num","num","BigNumber","div","pow","decimals","Trustline","setTrustline","user","counterParty","given","received","balance","Account","account","setAccount","leftReceived","relativeTimeThreshold","App","setNetwork","handleSelectNetwork","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.754f1a47.chunk.js","sourcesContent":["export async function fetch_endpoint(url) {\n  return (await fetch(url)).json()\n}\n","import React from \"react\"\n\nfunction NetworkInfo({ networkStatic, numUsers, numTransfers }) {\n  return (\n    <div>\n      <div className={\"title\"}>\n        {networkStatic.name} ({networkStatic.abbreviation})\n      </div>\n      <div className={\"subtitle\"}>\n        {numUsers} Users, {numTransfers} Transfers\n      </div>\n    </div>\n  )\n}\n\nexport default NetworkInfo\n","import React, { useEffect, useState } from \"react\"\n\nimport moment from \"moment\"\n\nfunction DiffTime({ timestamp }) {\n  const [diffTimeString, setDiffTimeString] = useState(\"\")\n\n  useEffect(() => {\n    function _update() {\n      setDiffTimeString(moment(timestamp).fromNow())\n    }\n    _update()\n    const id = setInterval(_update, 1000)\n    return () => clearInterval(id)\n  }, [timestamp])\n\n  return (\n    timestamp && (\n      <span>\n        {moment(timestamp).format(\"hh:mm:ss\")}({diffTimeString})\n      </span>\n    )\n  )\n}\n\nexport default DiffTime\n","import React, { useEffect, useRef, useState } from \"react\"\nimport vis from \"vis-network\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nimport \"./Network.css\"\nimport NetworkInfo from \"./NetworkInfo\"\nimport DiffTime from \"./DiffTime\"\n\nconst UPDATE_INTERVAL = 5000\n\nfunction filterEvents(eventList, eventName2list) {\n  const result = {}\n  for (const eventListName of Object.values(eventName2list)) {\n    result[eventListName] = []\n  }\n  for (const e of eventList) {\n    if (eventName2list[e.type]) {\n      result[eventName2list[e.type]].push(e)\n    }\n  }\n  return result\n}\n\nfunction build_graph(trustlineUpdateEvents) {\n  const nodes = new Set()\n  const edges = {}\n\n  for (const e of trustlineUpdateEvents) {\n    const addresses = [e.from, e.to]\n    for (const address of addresses) {\n      nodes.add(address)\n    }\n\n    let [address1, address2] = addresses\n    if (address2 < address1) {\n      ;[address1, address2] = [address2, address1]\n    }\n\n    edges[[address1, address2]] = {\n      id: address1 + address2,\n      from: address1,\n      to: address2,\n    }\n  }\n  const vis_nodes = []\n  const vis_edges = []\n  for (const node of nodes) {\n    vis_nodes.push({ id: node, label: node.slice(0, 7) })\n  }\n  for (const edge of Object.values(edges)) {\n    vis_edges.push(edge)\n  }\n  return [vis_nodes, vis_edges]\n}\n\nconst options = {\n  autoResize: true,\n  height: \"100%\",\n  width: \"100%\",\n  interaction: {\n    selectConnectedEdges: false,\n  },\n}\n\nfunction Network({ network, onSelectTrustline, onSelectAccount }) {\n  const container = useRef(null)\n  const [loadingPercent, setLoadingPercent] = useState(0)\n  const [visNetwork, setVisNetwork] = useState(null)\n\n  const [numTransfers, setNumTransfers] = useState(null)\n  const [numUsers, setNumUsers] = useState(null)\n\n  const [lastUpdateTimestamp, setLastUpdateTimestamp] = useState(null)\n\n  useEffect(function initVisNetwork() {\n    setVisNetwork(new vis.Network(container.current, {}, options))\n  }, [])\n\n  useEffect(\n    function setListener() {\n      if (!visNetwork) return\n\n      visNetwork.off(\"selectEdge\")\n      visNetwork.off(\"selectNode\")\n      visNetwork.off(\"deselectEdge\")\n      visNetwork.off(\"deselectNode\")\n      visNetwork.off(\"stabilizationProgress\")\n      visNetwork.on(\"selectEdge\", params => {\n        if (params.edges.length !== 1 || params.nodes.length !== 0) {\n          return\n        }\n        const tl_data = visNetwork.body.data.edges.get(params.edges[0])\n        const trustline = {\n          network: network.address,\n          from: tl_data[\"from\"],\n          to: tl_data[\"to\"],\n        }\n        onSelectTrustline(trustline)\n      })\n      visNetwork.on(\"selectNode\", params => {\n        if (params.nodes.length !== 1) {\n          return\n        }\n        onSelectAccount(params.nodes[0])\n      })\n      visNetwork.on(\"deselectEdge\", params => {\n        onSelectTrustline(null)\n      })\n      visNetwork.on(\"deselectNode\", params => {\n        onSelectAccount(null)\n      })\n      visNetwork.on(\"stabilizationProgress\", params => {\n        setLoadingPercent(Math.floor((params.iterations / params.total) * 100))\n      })\n    },\n    [network, visNetwork, onSelectAccount, onSelectTrustline]\n  )\n\n  useEffect(\n    function fetchData() {\n      if (!visNetwork) return\n      console.log(\"Init fetch\")\n      visNetwork.setData({})\n      setLoadingPercent(0)\n      setNumTransfers(0)\n      setNumUsers(0)\n      let nodeSet = null\n      let edgeSet = null\n      let finishedLoading = true\n\n      function startFetchData() {\n        let fromBlock = 0\n\n        async function _fetchMoreData() {\n          if (!finishedLoading) {\n            console.log(\"Skip fetching, because old still in progress\")\n            return\n          }\n          finishedLoading = false\n          console.log(\"Fetch events from block \", fromBlock)\n          let events = await fetch_endpoint(\n            process.env.REACT_APP_RELAY_URL +\n              `/api/v1/networks/${network.address}/events?fromBlock=${fromBlock}`\n          )\n\n          if (events.length === 0) {\n            console.log(\"No new events\")\n            setLastUpdateTimestamp(Date.now())\n            finishedLoading = true\n            return\n          }\n          const eventMap = filterEvents(events, {\n            TrustlineUpdate: \"trustlineUpdateEvents\",\n            Transfer: \"transferEvents\",\n          })\n          const [nodes, edges] = build_graph(eventMap.trustlineUpdateEvents)\n\n          if (nodeSet == null) {\n            console.log(\"Init network data\")\n            nodeSet = new vis.DataSet(nodes)\n            edgeSet = new vis.DataSet(edges)\n            const data = {\n              nodes: nodeSet,\n              edges: edgeSet,\n            }\n            visNetwork.setData(data)\n            visNetwork.once(\"stabilizationIterationsDone\", params => {\n              finishedLoading = true\n              setLoadingPercent(100)\n            })\n          } else {\n            console.log(\"Update network data\")\n            nodeSet.update(nodes)\n            edgeSet.update(edges)\n            finishedLoading = true\n          }\n\n          setNumTransfers(\n            numTransfers => numTransfers + eventMap.transferEvents.length\n          )\n          setNumUsers(nodeSet.length)\n          setLastUpdateTimestamp(Date.now())\n          fromBlock = events[events.length - 1].blockNumber + 1\n        }\n\n        _fetchMoreData()\n        return setInterval(_fetchMoreData, UPDATE_INTERVAL)\n      }\n\n      const intervalId = startFetchData()\n\n      return () => clearInterval(intervalId)\n    },\n    [visNetwork, network]\n  )\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <NetworkInfo\n        networkStatic={network}\n        numUsers={numUsers}\n        numTransfers={numTransfers}\n      />\n      last updated: <DiffTime timestamp={lastUpdateTimestamp} />\n      {loadingPercent !== 100 && (\n        <progress\n          className=\"progress my-progress is-info\"\n          value={loadingPercent}\n          max=\"100\"\n        >\n          {loadingPercent}%\n        </progress>\n      )}\n      <div style={{ width: \"100%\", height: \"90%\" }} ref={container} />\n    </div>\n  )\n}\n\nexport default Network\n","import React, { useCallback, useEffect, useState } from \"react\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nimport \"./NetworkSelect.css\"\n\nfunction NetworkSelect({ onNetworkSelect }) {\n  const [networks, setNetworks] = useState([])\n  const [selectedAddress, setSelectedAddress] = useState(null)\n\n  useEffect(() => {\n    async function _fetch() {\n      const networks = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL + `/api/v1/networks`\n      )\n      networks.sort(\n        (networkA, networkB) => networkB.numUsers - networkA.numUsers\n      )\n      setNetworks(networks)\n    }\n    _fetch()\n    const id = setInterval(_fetch, 10000)\n    return () => clearInterval(id)\n  }, [])\n\n  const selectNetwork = useCallback(\n    network => {\n      setSelectedAddress(network.address)\n      onNetworkSelect(network)\n    },\n    [onNetworkSelect, setSelectedAddress]\n  )\n\n  return (\n    <aside className={\"menu my-menu\"}>\n      <p className={\"menu-label\"}>Networks</p>\n      <ul>\n        {networks.map(network => (\n          <li key={network.address}>\n            <a\n              onClick={() => selectNetwork(network)}\n              className={\n                \"list-item \" +\n                (selectedAddress === network.address ? \"is-active\" : \"\")\n              }\n            >\n              {network.name} ({network.numUsers})\n            </a>\n          </li>\n        ))}\n      </ul>\n    </aside>\n  )\n}\n\nexport default NetworkSelect\n","import React, { useEffect, useState } from \"react\"\nimport BigNumber from \"bignumber.js\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nfunction format_num(value, network) {\n  const num = new BigNumber(value).div(new BigNumber(10).pow(network.decimals))\n  return `${num} ${network.abbreviation}`\n}\n\nfunction Trustline({ network, from, to }) {\n  const [trustline, setTrustline] = useState({})\n\n  useEffect(() => {\n    async function _fetch() {\n      const trustline = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL +\n          `/api/v1/networks/${network.address}/users/${from}/trustlines/${to}`\n      )\n      setTrustline(trustline)\n    }\n    _fetch()\n  }, [network, from, to])\n\n  return (\n    <div>\n      <div className={\"title\"}>Trustline Details</div>\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th>from</th>\n            <td>{trustline.user}</td>\n          </tr>\n          <tr>\n            <th>to</th>\n            <td>{trustline.counterParty}</td>\n          </tr>\n          <tr>\n            <th>Credit given</th>\n            <td>{format_num(trustline.given, network)}</td>\n          </tr>\n          <tr>\n            <th>Credit received</th>\n            <td>{format_num(trustline.received, network)}</td>\n          </tr>\n          <tr>\n            <th>Balance</th>\n            <td>{format_num(trustline.balance, network)}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Trustline\n","import React, { useEffect, useState } from \"react\"\nimport BigNumber from \"bignumber.js\"\n\nimport { fetch_endpoint } from \"./api.js\"\n\nfunction format_num(value, network) {\n  if (value == null) {\n    return \"...\"\n  }\n  const num = new BigNumber(value).div(new BigNumber(10).pow(network.decimals))\n  return `${num} ${network.abbreviation}`\n}\n\nfunction Account({ network, address }) {\n  const [account, setAccount] = useState({})\n\n  useEffect(() => {\n    async function _fetch() {\n      const account = await fetch_endpoint(\n        process.env.REACT_APP_RELAY_URL +\n          `/api/v1/networks/${network.address}/users/${address}`\n      )\n      setAccount(account)\n    }\n    _fetch()\n  }, [network, address])\n\n  return (\n    <div>\n      <div className={\"title\"}>Account Details</div>\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th>User</th>\n            <td>{address}</td>\n          </tr>\n          <tr>\n            <th>Credit given</th>\n            <td>{format_num(account.given, network)}</td>\n          </tr>\n          <tr>\n            <th>Credit received</th>\n            <td>{format_num(account.received, network)}</td>\n          </tr>\n          <tr>\n            <th>Balance</th>\n            <td>{format_num(account.balance, network)}</td>\n          </tr>\n          <tr>\n            <th>Available</th>\n            <td>{format_num(account.leftReceived, network)}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Account\n","import React, { useCallback, useState } from \"react\"\nimport moment from \"moment\"\n\nimport Network from \"./Network\"\nimport NetworkSelect from \"./NetworkSelect\"\nimport Trustline from \"./Trustline\"\nimport Account from \"./Account\"\n\nimport \"bulma/css/bulma.css\"\nimport \"./App.css\"\n\nmoment.relativeTimeThreshold(\"ss\", 10)\n\nfunction App() {\n  const [network, setNetwork] = useState(null)\n  const [trustline, setTrustline] = useState(null)\n  const [account, setAccount] = useState(null)\n\n  const handleSelectNetwork = useCallback(network => {\n    setTrustline(null)\n    setAccount(null)\n    setNetwork(network)\n  }, [])\n\n  return (\n    <div className={\"mycontainer columns\"}>\n      <div className={\"column is-narrow\"}>\n        <NetworkSelect onNetworkSelect={handleSelectNetwork} />\n      </div>\n      <div className={\"column is-three-quarter\"}>\n        {network ? (\n          <Network\n            network={network}\n            onSelectTrustline={setTrustline}\n            onSelectAccount={setAccount}\n          />\n        ) : (\n          <div className={\"has-text-centered\"}>Select a network</div>\n        )}\n      </div>\n      <div className={\"column is-one-quarter\"}>\n        {trustline ? (\n          <Trustline\n            network={network}\n            from={trustline.from}\n            to={trustline.to}\n          />\n        ) : (\n          <div className={\"has-text-centered\"}>Select a trustline</div>\n        )}\n        <br />\n        <br />\n        {account ? (\n          <Account network={network} address={account} />\n        ) : (\n          <div className={\"has-text-centered\"}>Select an account</div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}