(this["webpackJsonpproto-dashboard"]=this["webpackJsonpproto-dashboard"]||[]).push([[0],{14:function(e,t,a){},18:function(e,t,a){},19:function(e,t,a){},21:function(e,t,a){},22:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a.n(n),c=a(8),l=a.n(c),o=(a(14),a(1)),s=a(5),u=a.n(s),i=a(2),f=a.n(i),d=a(3),b=a(6);function m(e){return E.apply(this,arguments)}function E(){return(E=Object(d.a)(f.a.mark((function e(t){return f.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(t);case 2:return e.abrupt("return",e.sent.json());case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}a(18);var v=function(e){var t=e.networkStatic,a=e.numUsers,n=e.numTransfers;return r.a.createElement("div",null,r.a.createElement("div",{className:"title"},t.name," (",t.abbreviation,")"),r.a.createElement("div",{className:"subtitle"},a," Users, ",n," Transfers"))};var h=function(e){var t=e.timestamp,a=Object(n.useState)(""),c=Object(o.a)(a,2),l=c[0],s=c[1];return Object(n.useEffect)((function(){function e(){s(u()(t).fromNow())}e();var a=setInterval(e,1e3);return function(){return clearInterval(a)}}),[t]),t&&r.a.createElement("span",null,u()(t).format("hh:mm:ss"),"(",l,")")};function p(e,t){for(var a={},n=0,r=Object.values(t);n<r.length;n++){a[r[n]]=[]}var c=!0,l=!1,o=void 0;try{for(var s,u=e[Symbol.iterator]();!(c=(s=u.next()).done);c=!0){var i=s.value;t[i.type]&&a[t[i.type]].push(i)}}catch(f){l=!0,o=f}finally{try{c||null==u.return||u.return()}finally{if(l)throw o}}return a}function C(e){var t=new Set,a={},n=!0,r=!1,c=void 0;try{for(var l,o=e[Symbol.iterator]();!(n=(l=o.next()).done);n=!0){for(var s=l.value,u=[s.from,s.to],i=0,f=u;i<f.length;i++){var d=f[i];t.add(d)}var b=u[0],m=u[1];if(m<b){var E=[m,b];b=E[0],m=E[1]}a[[b,m]]={id:b+m,from:b,to:m}}}catch(g){r=!0,c=g}finally{try{n||null==o.return||o.return()}finally{if(r)throw c}}var v=[],h=[],p=!0,C=!1,x=void 0;try{for(var B,A=t[Symbol.iterator]();!(p=(B=A.next()).done);p=!0){var w=B.value;v.push({id:w,label:w.slice(0,7)})}}catch(g){C=!0,x=g}finally{try{p||null==A.return||A.return()}finally{if(C)throw x}}for(var D=0,y=Object.values(a);D<y.length;D++){var F=y[D];h.push(F)}return[v,h]}var x={autoResize:!0,height:"100%",width:"100%",interaction:{selectConnectedEdges:!1}};var B=function(e){var t=e.network,a=e.onSelectTrustline,c=e.onSelectAccount,l=Object(n.useRef)(null),s=Object(n.useState)(0),u=Object(o.a)(s,2),i=u[0],E=u[1],B=Object(n.useState)(null),A=Object(o.a)(B,2),w=A[0],D=A[1],y=Object(n.useState)(null),F=Object(o.a)(y,2),g=F[0],j=F[1],O=Object(n.useState)(null),k=Object(o.a)(O,2),S=k[0],N=k[1],U=Object(n.useState)(null),I=Object(o.a)(U,2),T=I[0],z=I[1];return Object(n.useEffect)((function(){D(new b.a.Network(l.current,{},x))}),[]),Object(n.useEffect)((function(){w&&(w.off("selectEdge"),w.off("selectNode"),w.off("deselectEdge"),w.off("deselectNode"),w.off("stabilizationProgress"),w.on("selectEdge",(function(e){if(1===e.edges.length&&0===e.nodes.length){var n=w.body.data.edges.get(e.edges[0]),r={network:t.address,from:n.from,to:n.to};a(r)}})),w.on("selectNode",(function(e){1===e.nodes.length&&c(e.nodes[0])})),w.on("deselectEdge",(function(e){a(null)})),w.on("deselectNode",(function(e){c(null)})),w.on("stabilizationProgress",(function(e){E(Math.floor(e.iterations/e.total*100))})))}),[t,w,c,a]),Object(n.useEffect)((function(){if(w){console.log("Init fetch"),w.setData({}),E(0),j(0),N(0);var e=null,a=null,n=!0,r=function(){var r=0;function c(){return l.apply(this,arguments)}function l(){return(l=Object(d.a)(f.a.mark((function c(){var l,s,u,i,d,v,h;return f.a.wrap((function(c){for(;;)switch(c.prev=c.next){case 0:if(n){c.next=3;break}return console.log("Skip fetching, because old still in progress"),c.abrupt("return");case 3:return n=!1,console.log("Fetch events from block ",r),c.next=7,m("https://tlbc.relay.anyblock.tools"+"/api/v1/networks/".concat(t.address,"/events?fromBlock=").concat(r));case 7:if(0!==(l=c.sent).length){c.next=13;break}return console.log("No new events"),z(Date.now()),n=!0,c.abrupt("return");case 13:s=p(l,{TrustlineUpdate:"trustlineUpdateEvents",Transfer:"transferEvents"}),u=C(s.trustlineUpdateEvents),i=Object(o.a)(u,2),d=i[0],v=i[1],null==e?(console.log("Init network data"),e=new b.a.DataSet(d),a=new b.a.DataSet(v),h={nodes:e,edges:a},w.setData(h),w.once("stabilizationIterationsDone",(function(e){n=!0,E(100)}))):(console.log("Update network data"),e.update(d),a.update(v),n=!0),j((function(e){return e+s.transferEvents.length})),N(e.length),z(Date.now()),r=l[l.length-1].blockNumber+1;case 20:case"end":return c.stop()}}),c)})))).apply(this,arguments)}return c(),setInterval(c,5e3)}();return function(){return clearInterval(r)}}}),[w,t]),r.a.createElement("div",{style:{width:"100%",height:"100%"}},r.a.createElement(v,{networkStatic:t,numUsers:S,numTransfers:g}),"last updated: ",r.a.createElement(h,{timestamp:T}),100!==i&&r.a.createElement("progress",{className:"progress my-progress is-info",value:i,max:"100"},i,"%"),r.a.createElement("div",{style:{width:"100%",height:"90%"},ref:l}))},A=(a(19),["0x12657128d7fa4291647eC3b0147E5fA6EebD388A","0xF2320a5371DA3CB967B9355597AA7adEc17E4220","0x18BDC736b23Ff7294BED9fa988a1443357C7B0ed","0x0A6f0C541Be542c098B7Ee03C9C634f20BCf8422","0x01564a4b7C327c84763D7fCf629B02584AE72973","0x8B2c0e43F69a8a25c94510cC85138260bb24e381","0x7A6049b3A96E7a6D68e6e6813a19594Ea336d080","0xB57C960Ee760cDa8184C9C9d9b7D0FeBE4557616","0x8306e229ea6Edf3aD2670681912CcC0C338f7963","0x70d4db4eC56b398D7cbA3666835490cb0e39f008","0x049D814ED22bEA4394aC2Ec48bace8A1e31BC376","0xc3790A6df080381ebf3eF9BeB35e6b70431bB420","0xa81DE4DA252E012a5e8b0Fe1FE91BB0a55Dc5f9d","0xB365694dB0961Fe81cA5e296c1250d24a4Ee627f","0x1A64Bd5e956DA93E912CB7eb9b00B8D2Bc9015F9","0x714dabD79B7962dA47c8fEA446064523CE0456fE","0xC0f1030d83AEEF1616deef060114E31B3A25De81","0x15933718E2e3478e756C13d516f7f4f4F749b3D6","0x77626459240b8105DeC70dC97D61441924f166Df","0x264B1775Ce5d2831608575974CfB9EB9F8F659f5","0xb2B3A0E958e3eEb333b734ABF34ACA2dB5b94B8F","0xA31fA3D8DaEBc1d7fb91a6F5F6805873dC958Ff2","0x603f22B1D3854b985E0a61Ce4c0349534a0e5673","0x5F74eD72158566c05328Eb815544461bD0b45116","0x7Ac3fC1C428df99D81d9b644106FF67c44A155aA","0xef5bC01da9AC8B32F78dC847D84454E48510Ef72","0x97668E07c122f7701b804A4eA6fd196F1e264423","0x57c4a2cCF2CC99f3dF7855465d1528C110Ff4F14","0xa809D5e740AA324FF94751836b1d7Aa6BA2de81E","0xF455c46823Cdb5A899217A0f085525874bA194A8","0xc8a0a3aA3A98F27198De126379386D8aA7D01950","0xCaa5B04e6E44EC3106EEBdAAd7D6C7bE9370Be32","0x2421A2ea7B24b5D26177B78afcf8F4B40255324d","0x2aB3f469D041aE68F45b3C255B7CB46370FfffF5","0x03FE2A6a589e33b7d3cD8208705092BE572A76d1","0xFe54Cbb23414467CcC052dACA1ecc908745D71Eb","0x4D4dd71A818D4F7d3349F936382ea70979123F81","0xCC6039e0681548002bcF39bf65d444beD65980B0","0x821b770a4b5D1228322B2A2Bb29354b5faabD29F","0x86D50E94e6Ba4B99C5c19439c13a07E5B7c231f9","0x6212C2783B2acCA8468b1befb19a4aAccb3c4970","0x4B1Ce992B04539786DF19dDC416490cd6595DB01","0x8588173E0322089Efe851b14d041aC15AC991C07","0xcb02a08a72Cb459fE41E987065fE1E2D7438E64E","0x0FbD56e384826246dC795C1A1951c781184F8faa"]);var w=function(e){var t=e.onNetworkSelect,a=Object(n.useState)([]),c=Object(o.a)(a,2),l=c[0],s=c[1],u=Object(n.useState)(null),i=Object(o.a)(u,2),b=i[0],E=i[1];Object(n.useEffect)((function(){function e(){return t.apply(this,arguments)}function t(){return(t=Object(d.a)(f.a.mark((function e(){var t;return f.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,m("https://tlbc.relay.anyblock.tools/api/v1/networks");case 2:(t=(t=e.sent).filter((function(e){return!A.includes(e.address)}))).sort((function(e,t){return t.numUsers-e.numUsers})),s(t);case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}e();var a=setInterval(e,1e4);return function(){return clearInterval(a)}}),[]);var v=Object(n.useCallback)((function(e){E(e.address),t(e)}),[t,E]);return r.a.createElement("aside",{className:"menu my-menu"},r.a.createElement("p",{className:"menu-label"},"Networks"),r.a.createElement("ul",null,l.map((function(e){return r.a.createElement("li",{key:e.address},r.a.createElement("a",{onClick:function(){return v(e)},className:"list-item "+(b===e.address?"is-active":"")},e.name," (",e.numUsers,")"))}))))},D=a(4),y=a.n(D);function F(e,t){var a=new y.a(e).div(new y.a(10).pow(t.decimals));return"".concat(a," ").concat(t.abbreviation)}var g=function(e){var t=e.network,a=e.from,c=e.to,l=Object(n.useState)({}),s=Object(o.a)(l,2),u=s[0],i=s[1];return Object(n.useEffect)((function(){function e(){return(e=Object(d.a)(f.a.mark((function e(){var n;return f.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,m("https://tlbc.relay.anyblock.tools"+"/api/v1/networks/".concat(t.address,"/users/").concat(a,"/trustlines/").concat(c));case 2:n=e.sent,i(n);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[t,a,c]),r.a.createElement("div",null,r.a.createElement("div",{className:"title"},"Trustline Details"),r.a.createElement("table",{className:"table"},r.a.createElement("tbody",null,r.a.createElement("tr",null,r.a.createElement("th",null,"from"),r.a.createElement("td",null,u.user)),r.a.createElement("tr",null,r.a.createElement("th",null,"to"),r.a.createElement("td",null,u.counterParty)),r.a.createElement("tr",null,r.a.createElement("th",null,"Credit given"),r.a.createElement("td",null,F(u.given,t))),r.a.createElement("tr",null,r.a.createElement("th",null,"Credit received"),r.a.createElement("td",null,F(u.received,t))),r.a.createElement("tr",null,r.a.createElement("th",null,"Balance"),r.a.createElement("td",null,F(u.balance,t))))))};function j(e,t){if(null==e)return"...";var a=new y.a(e).div(new y.a(10).pow(t.decimals));return"".concat(a," ").concat(t.abbreviation)}var O=function(e){var t=e.network,a=e.address,c=Object(n.useState)({}),l=Object(o.a)(c,2),s=l[0],u=l[1];return Object(n.useEffect)((function(){function e(){return(e=Object(d.a)(f.a.mark((function e(){var n;return f.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,m("https://tlbc.relay.anyblock.tools"+"/api/v1/networks/".concat(t.address,"/users/").concat(a));case 2:n=e.sent,u(n);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[t,a]),r.a.createElement("div",null,r.a.createElement("div",{className:"title"},"Account Details"),r.a.createElement("table",{className:"table"},r.a.createElement("tbody",null,r.a.createElement("tr",null,r.a.createElement("th",null,"User"),r.a.createElement("td",null,a)),r.a.createElement("tr",null,r.a.createElement("th",null,"Credit given"),r.a.createElement("td",null,j(s.given,t))),r.a.createElement("tr",null,r.a.createElement("th",null,"Credit received"),r.a.createElement("td",null,j(s.received,t))),r.a.createElement("tr",null,r.a.createElement("th",null,"Balance"),r.a.createElement("td",null,j(s.balance,t))),r.a.createElement("tr",null,r.a.createElement("th",null,"Available"),r.a.createElement("td",null,j(s.leftReceived,t))))))};a(20),a(21);u.a.relativeTimeThreshold("ss",10);var k=function(){var e=Object(n.useState)(null),t=Object(o.a)(e,2),a=t[0],c=t[1],l=Object(n.useState)(null),s=Object(o.a)(l,2),u=s[0],i=s[1],f=Object(n.useState)(null),d=Object(o.a)(f,2),b=d[0],m=d[1],E=Object(n.useCallback)((function(e){i(null),m(null),c(e)}),[]);return r.a.createElement("div",{className:"mycontainer columns"},r.a.createElement("div",{className:"column is-narrow"},r.a.createElement(w,{onNetworkSelect:E})),r.a.createElement("div",{className:"column is-three-quarter"},a?r.a.createElement(B,{network:a,onSelectTrustline:i,onSelectAccount:m}):r.a.createElement("div",{className:"has-text-centered"},"Select a network")),r.a.createElement("div",{className:"column is-one-quarter"},u?r.a.createElement(g,{network:a,from:u.from,to:u.to}):r.a.createElement("div",{className:"has-text-centered"},"Select a trustline"),r.a.createElement("br",null),r.a.createElement("br",null),b?r.a.createElement(O,{network:a,address:b}):r.a.createElement("div",{className:"has-text-centered"},"Select an account")))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(r.a.createElement(k,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))},9:function(e,t,a){e.exports=a(22)}},[[9,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyIsIk5ldHdvcmtJbmZvLmpzIiwiRGlmZlRpbWUuanMiLCJOZXR3b3JrLmpzIiwiZnJvemVuTmV0d29ya3MuanMiLCJOZXR3b3JrU2VsZWN0LmpzIiwiVHJ1c3RsaW5lLmpzIiwiQWNjb3VudC5qcyIsIkFwcC5qcyIsInNlcnZpY2VXb3JrZXIuanMiLCJpbmRleC5qcyJdLCJuYW1lcyI6WyJmZXRjaF9lbmRwb2ludCIsInVybCIsImEiLCJmZXRjaCIsImpzb24iLCJOZXR3b3JrSW5mbyIsIm5ldHdvcmtTdGF0aWMiLCJudW1Vc2VycyIsIm51bVRyYW5zZmVycyIsImNsYXNzTmFtZSIsIm5hbWUiLCJhYmJyZXZpYXRpb24iLCJEaWZmVGltZSIsInRpbWVzdGFtcCIsInVzZVN0YXRlIiwiZGlmZlRpbWVTdHJpbmciLCJzZXREaWZmVGltZVN0cmluZyIsInVzZUVmZmVjdCIsIl91cGRhdGUiLCJtb21lbnQiLCJmcm9tTm93IiwiaWQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJmb3JtYXQiLCJmaWx0ZXJFdmVudHMiLCJldmVudExpc3QiLCJldmVudE5hbWUybGlzdCIsInJlc3VsdCIsIk9iamVjdCIsInZhbHVlcyIsImUiLCJ0eXBlIiwicHVzaCIsImJ1aWxkX2dyYXBoIiwidHJ1c3RsaW5lVXBkYXRlRXZlbnRzIiwibm9kZXMiLCJTZXQiLCJlZGdlcyIsImFkZHJlc3NlcyIsImZyb20iLCJ0byIsImFkZHJlc3MiLCJhZGQiLCJhZGRyZXNzMSIsImFkZHJlc3MyIiwidmlzX25vZGVzIiwidmlzX2VkZ2VzIiwibm9kZSIsImxhYmVsIiwic2xpY2UiLCJlZGdlIiwib3B0aW9ucyIsImF1dG9SZXNpemUiLCJoZWlnaHQiLCJ3aWR0aCIsImludGVyYWN0aW9uIiwic2VsZWN0Q29ubmVjdGVkRWRnZXMiLCJOZXR3b3JrIiwibmV0d29yayIsIm9uU2VsZWN0VHJ1c3RsaW5lIiwib25TZWxlY3RBY2NvdW50IiwiY29udGFpbmVyIiwidXNlUmVmIiwibG9hZGluZ1BlcmNlbnQiLCJzZXRMb2FkaW5nUGVyY2VudCIsInZpc05ldHdvcmsiLCJzZXRWaXNOZXR3b3JrIiwic2V0TnVtVHJhbnNmZXJzIiwic2V0TnVtVXNlcnMiLCJsYXN0VXBkYXRlVGltZXN0YW1wIiwic2V0TGFzdFVwZGF0ZVRpbWVzdGFtcCIsInZpcyIsImN1cnJlbnQiLCJvZmYiLCJvbiIsInBhcmFtcyIsImxlbmd0aCIsInRsX2RhdGEiLCJib2R5IiwiZGF0YSIsImdldCIsInRydXN0bGluZSIsIk1hdGgiLCJmbG9vciIsIml0ZXJhdGlvbnMiLCJ0b3RhbCIsImNvbnNvbGUiLCJsb2ciLCJzZXREYXRhIiwibm9kZVNldCIsImVkZ2VTZXQiLCJmaW5pc2hlZExvYWRpbmciLCJpbnRlcnZhbElkIiwiZnJvbUJsb2NrIiwiX2ZldGNoTW9yZURhdGEiLCJwcm9jZXNzIiwiZXZlbnRzIiwiRGF0ZSIsIm5vdyIsImV2ZW50TWFwIiwiVHJ1c3RsaW5lVXBkYXRlIiwiVHJhbnNmZXIiLCJEYXRhU2V0Iiwib25jZSIsInVwZGF0ZSIsInRyYW5zZmVyRXZlbnRzIiwiYmxvY2tOdW1iZXIiLCJzdGFydEZldGNoRGF0YSIsInN0eWxlIiwidmFsdWUiLCJtYXgiLCJyZWYiLCJmcm96ZW5OZXR3b3JrcyIsIk5ldHdvcmtTZWxlY3QiLCJvbk5ldHdvcmtTZWxlY3QiLCJuZXR3b3JrcyIsInNldE5ldHdvcmtzIiwic2VsZWN0ZWRBZGRyZXNzIiwic2V0U2VsZWN0ZWRBZGRyZXNzIiwiX2ZldGNoIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJzb3J0IiwibmV0d29ya0EiLCJuZXR3b3JrQiIsInNlbGVjdE5ldHdvcmsiLCJ1c2VDYWxsYmFjayIsIm1hcCIsImtleSIsIm9uQ2xpY2siLCJmb3JtYXRfbnVtIiwibnVtIiwiQmlnTnVtYmVyIiwiZGl2IiwicG93IiwiZGVjaW1hbHMiLCJUcnVzdGxpbmUiLCJzZXRUcnVzdGxpbmUiLCJ1c2VyIiwiY291bnRlclBhcnR5IiwiZ2l2ZW4iLCJyZWNlaXZlZCIsImJhbGFuY2UiLCJBY2NvdW50IiwiYWNjb3VudCIsInNldEFjY291bnQiLCJsZWZ0UmVjZWl2ZWQiLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJBcHAiLCJzZXROZXR3b3JrIiwiaGFuZGxlU2VsZWN0TmV0d29yayIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwibWF0Y2giLCJSZWFjdERPTSIsInJlbmRlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwicmVhZHkiLCJ0aGVuIiwicmVnaXN0cmF0aW9uIiwidW5yZWdpc3RlciIsImNhdGNoIiwiZXJyb3IiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoicVRBQU8sU0FBZUEsRUFBdEIsa0MsNENBQU8sV0FBOEJDLEdBQTlCLFNBQUFDLEVBQUEsc0VBQ1NDLE1BQU1GLEdBRGYsdUNBQ3FCRyxRQURyQiw0Qyw0QkNlUUMsTUFiZixZQUFpRSxJQUExQ0MsRUFBeUMsRUFBekNBLGNBQWVDLEVBQTBCLEVBQTFCQSxTQUFVQyxFQUFnQixFQUFoQkEsYUFDOUMsT0FDRSw2QkFDRSx5QkFBS0MsVUFBVyxTQUNiSCxFQUFjSSxLQURqQixLQUN5QkosRUFBY0ssYUFEdkMsS0FHQSx5QkFBS0YsVUFBVyxZQUNiRixFQURILFdBQ3FCQyxFQURyQixnQkNpQlNJLE1BckJmLFlBQWtDLElBQWRDLEVBQWEsRUFBYkEsVUFBYSxFQUNhQyxtQkFBUyxJQUR0QixtQkFDeEJDLEVBRHdCLEtBQ1JDLEVBRFEsS0FZL0IsT0FUQUMscUJBQVUsV0FDUixTQUFTQyxJQUNQRixFQUFrQkcsSUFBT04sR0FBV08sV0FFdENGLElBQ0EsSUFBTUcsRUFBS0MsWUFBWUosRUFBUyxLQUNoQyxPQUFPLGtCQUFNSyxjQUFjRixNQUMxQixDQUFDUixJQUdGQSxHQUNFLDhCQUNHTSxJQUFPTixHQUFXVyxPQUFPLFlBRDVCLElBQzBDVCxFQUQxQyxNQ1BOLFNBQVNVLEVBQWFDLEVBQVdDLEdBRS9CLElBREEsSUFBTUMs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S0FDaEJDLEdBQUl5QyxFQUFVekMsS0FHaEIseUJBQUtoQyxVQUFXLHFCQUFoQixzQkFFRiw2QkFDQSw2QkFDQ3dJLEVBQ0Msa0JBQUMsRUFBRCxDQUFTdEYsUUFBU0EsRUFBU2pCLFFBQVN1RyxJQUVwQyx5QkFBS3hJLFVBQVcscUJBQWhCLHdCQzNDVStJLFFBQ1csY0FBN0JDLE9BQU9DLFNBQVNDLFVBRWUsVUFBN0JGLE9BQU9DLFNBQVNDLFVBRWhCRixPQUFPQyxTQUFTQyxTQUFTQyxNQUN2QiwyRENaTkMsSUFBU0MsT0FBTyxrQkFBQyxFQUFELE1BQVNDLFNBQVNDLGVBQWUsU0Q2SDNDLGtCQUFtQkMsV0FDckJBLFVBQVVDLGNBQWNDLE1BQ3JCQyxNQUFLLFNBQUFDLEdBQ0pBLEVBQWFDLGdCQUVkQyxPQUFNLFNBQUFDLEdBQ0xqRixRQUFRaUYsTUFBTUEsRUFBTUMsYSIsImZpbGUiOiJzdGF0aWMvanMvbWFpbi5iZTNmOTRlYi5jaHVuay5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaF9lbmRwb2ludCh1cmwpIHtcbiAgcmV0dXJuIChhd2FpdCBmZXRjaCh1cmwpKS5qc29uKClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuXG5mdW5jdGlvbiBOZXR3b3JrSW5mbyh7IG5ldHdvcmtTdGF0aWMsIG51bVVzZXJzLCBudW1UcmFuc2ZlcnMgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17XCJ0aXRsZVwifT5cbiAgICAgICAge25ldHdvcmtTdGF0aWMubmFtZX0gKHtuZXR3b3JrU3RhdGljLmFiYnJldmlhdGlvbn0pXG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcInN1YnRpdGxlXCJ9PlxuICAgICAgICB7bnVtVXNlcnN9IFVzZXJzLCB7bnVtVHJhbnNmZXJzfSBUcmFuc2ZlcnNcbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5ldHdvcmtJbmZvXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiXG5cbmZ1bmN0aW9uIERpZmZUaW1lKHsgdGltZXN0YW1wIH0pIHtcbiAgY29uc3QgW2RpZmZUaW1lU3RyaW5nLCBzZXREaWZmVGltZVN0cmluZ10gPSB1c2VTdGF0ZShcIlwiKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZnVuY3Rpb24gX3VwZGF0ZSgpIHtcbiAgICAgIHNldERpZmZUaW1lU3RyaW5nKG1vbWVudCh0aW1lc3RhbXApLmZyb21Ob3coKSlcbiAgICB9XG4gICAgX3VwZGF0ZSgpXG4gICAgY29uc3QgaWQgPSBzZXRJbnRlcnZhbChfdXBkYXRlLCAxMDAwKVxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGlkKVxuICB9LCBbdGltZXN0YW1wXSlcblxuICByZXR1cm4gKFxuICAgIHRpbWVzdGFtcCAmJiAoXG4gICAgICA8c3Bhbj5cbiAgICAgICAge21vbWVudCh0aW1lc3RhbXApLmZvcm1hdChcImhoOm1tOnNzXCIpfSh7ZGlmZlRpbWVTdHJpbmd9KVxuICAgICAgPC9zcGFuPlxuICAgIClcbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBEaWZmVGltZVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgdmlzIGZyb20gXCJ2aXMtbmV0d29ya1wiXG5cbmltcG9ydCB7IGZldGNoX2VuZHBvaW50IH0gZnJvbSBcIi4vYXBpLmpzXCJcblxuaW1wb3J0IFwiLi9OZXR3b3JrLmNzc1wiXG5pbXBvcnQgTmV0d29ya0luZm8gZnJvbSBcIi4vTmV0d29ya0luZm9cIlxuaW1wb3J0IERpZmZUaW1lIGZyb20gXCIuL0RpZmZUaW1lXCJcblxuY29uc3QgVVBEQVRFX0lOVEVSVkFMID0gNTAwMFxuXG5mdW5jdGlvbiBmaWx0ZXJFdmVudHMoZXZlbnRMaXN0LCBldmVudE5hbWUybGlzdCkge1xuICBjb25zdCByZXN1bHQgPSB7fVxuICBmb3IgKGNvbnN0IGV2ZW50TGlzdE5hbWUgb2YgT2JqZWN0LnZhbHVlcyhldmVudE5hbWUybGlzdCkpIHtcbiAgICByZXN1bHRbZXZlbnRMaXN0TmFtZV0gPSBbXVxuICB9XG4gIGZvciAoY29uc3QgZSBvZiBldmVudExpc3QpIHtcbiAgICBpZiAoZXZlbnROYW1lMmxpc3RbZS50eXBlXSkge1xuICAgICAgcmVzdWx0W2V2ZW50TmFtZTJsaXN0W2UudHlwZV1dLnB1c2goZSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBidWlsZF9ncmFwaCh0cnVzdGxpbmVVcGRhdGVFdmVudHMpIHtcbiAgY29uc3Qgbm9kZXMgPSBuZXcgU2V0KClcbiAgY29uc3QgZWRnZXMgPSB7fVxuXG4gIGZvciAoY29uc3QgZSBvZiB0cnVzdGxpbmVVcGRhdGVFdmVudHMpIHtcbiAgICBjb25zdCBhZGRyZXNzZXMgPSBbZS5mcm9tLCBlLnRvXVxuICAgIGZvciAoY29uc3QgYWRkcmVzcyBvZiBhZGRyZXNzZXMpIHtcbiAgICAgIG5vZGVzLmFkZChhZGRyZXNzKVxuICAgIH1cblxuICAgIGxldCBbYWRkcmVzczEsIGFkZHJlc3MyXSA9IGFkZHJlc3Nlc1xuICAgIGlmIChhZGRyZXNzMiA8IGFkZHJlc3MxKSB7XG4gICAgICA7W2FkZHJlc3MxLCBhZGRyZXNzMl0gPSBbYWRkcmVzczIsIGFkZHJlc3MxXVxuICAgIH1cblxuICAgIGVkZ2VzW1thZGRyZXNzMSwgYWRkcmVzczJdXSA9IHtcbiAgICAgIGlkOiBhZGRyZXNzMSArIGFkZHJlc3MyLFxuICAgICAgZnJvbTogYWRkcmVzczEsXG4gICAgICB0bzogYWRkcmVzczIsXG4gICAgfVxuICB9XG4gIGNvbnN0IHZpc19ub2RlcyA9IFtdXG4gIGNvbnN0IHZpc19lZGdlcyA9IFtdXG4gIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgIHZpc19ub2Rlcy5wdXNoKHsgaWQ6IG5vZGUsIGxhYmVsOiBub2RlLnNsaWNlKDAsIDcpIH0pXG4gIH1cbiAgZm9yIChjb25zdCBlZGdlIG9mIE9iamVjdC52YWx1ZXMoZWRnZXMpKSB7XG4gICAgdmlzX2VkZ2VzLnB1c2goZWRnZSlcbiAgfVxuICByZXR1cm4gW3Zpc19ub2RlcywgdmlzX2VkZ2VzXVxufVxuXG5jb25zdCBvcHRpb25zID0ge1xuICBhdXRvUmVzaXplOiB0cnVlLFxuICBoZWlnaHQ6IFwiMTAwJVwiLFxuICB3aWR0aDogXCIxMDAlXCIsXG4gIGludGVyYWN0aW9uOiB7XG4gICAgc2VsZWN0Q29ubmVjdGVkRWRnZXM6IGZhbHNlLFxuICB9LFxufVxuXG5mdW5jdGlvbiBOZXR3b3JrKHsgbmV0d29yaywgb25TZWxlY3RUcnVzdGxpbmUsIG9uU2VsZWN0QWNjb3VudCB9KSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IHVzZVJlZihudWxsKVxuICBjb25zdCBbbG9hZGluZ1BlcmNlbnQsIHNldExvYWRpbmdQZXJjZW50XSA9IHVzZVN0YXRlKDApXG4gIGNvbnN0IFt2aXNOZXR3b3JrLCBzZXRWaXNOZXR3b3JrXSA9IHVzZVN0YXRlKG51bGwpXG5cbiAgY29uc3QgW251bVRyYW5zZmVycywgc2V0TnVtVHJhbnNmZXJzXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFtudW1Vc2Vycywgc2V0TnVtVXNlcnNdID0gdXNlU3RhdGUobnVsbClcblxuICBjb25zdCBbbGFzdFVwZGF0ZVRpbWVzdGFtcCwgc2V0TGFzdFVwZGF0ZVRpbWVzdGFtcF0gPSB1c2VTdGF0ZShudWxsKVxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiBpbml0VmlzTmV0d29yaygpIHtcbiAgICBzZXRWaXNOZXR3b3JrKG5ldyB2aXMuTmV0d29yayhjb250YWluZXIuY3VycmVudCwge30sIG9wdGlvbnMpKVxuICB9LCBbXSlcblxuICB1c2VFZmZlY3QoXG4gICAgZnVuY3Rpb24gc2V0TGlzdGVuZXIoKSB7XG4gICAgICBpZiAoIXZpc05ldHdvcmspIHJldHVyblxuXG4gICAgICB2aXNOZXR3b3JrLm9mZihcInNlbGVjdEVkZ2VcIilcbiAgICAgIHZpc05ldHdvcmsub2ZmKFwic2VsZWN0Tm9kZVwiKVxuICAgICAgdmlzTmV0d29yay5vZmYoXCJkZXNlbGVjdEVkZ2VcIilcbiAgICAgIHZpc05ldHdvcmsub2ZmKFwiZGVzZWxlY3ROb2RlXCIpXG4gICAgICB2aXNOZXR3b3JrLm9mZihcInN0YWJpbGl6YXRpb25Qcm9ncmVzc1wiKVxuICAgICAgdmlzTmV0d29yay5vbihcInNlbGVjdEVkZ2VcIiwgcGFyYW1zID0+IHtcbiAgICAgICAgaWYgKHBhcmFtcy5lZGdlcy5sZW5ndGggIT09IDEgfHwgcGFyYW1zLm5vZGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRsX2RhdGEgPSB2aXNOZXR3b3JrLmJvZHkuZGF0YS5lZGdlcy5nZXQocGFyYW1zLmVkZ2VzWzBdKVxuICAgICAgICBjb25zdCB0cnVzdGxpbmUgPSB7XG4gICAgICAgICAgbmV0d29yazogbmV0d29yay5hZGRyZXNzLFxuICAgICAgICAgIGZyb206IHRsX2RhdGFbXCJmcm9tXCJdLFxuICAgICAgICAgIHRvOiB0bF9kYXRhW1widG9cIl0sXG4gICAgICAgIH1cbiAgICAgICAgb25TZWxlY3RUcnVzdGxpbmUodHJ1c3RsaW5lKVxuICAgICAgfSlcbiAgICAgIHZpc05ldHdvcmsub24oXCJzZWxlY3ROb2RlXCIsIHBhcmFtcyA9PiB7XG4gICAgICAgIGlmIChwYXJhbXMubm9kZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgb25TZWxlY3RBY2NvdW50KHBhcmFtcy5ub2Rlc1swXSlcbiAgICAgIH0pXG4gICAgICB2aXNOZXR3b3JrLm9uKFwiZGVzZWxlY3RFZGdlXCIsIHBhcmFtcyA9PiB7XG4gICAgICAgIG9uU2VsZWN0VHJ1c3RsaW5lKG51bGwpXG4gICAgICB9KVxuICAgICAgdmlzTmV0d29yay5vbihcImRlc2VsZWN0Tm9kZVwiLCBwYXJhbXMgPT4ge1xuICAgICAgICBvblNlbGVjdEFjY291bnQobnVsbClcbiAgICAgIH0pXG4gICAgICB2aXNOZXR3b3JrLm9uKFwic3RhYmlsaXphdGlvblByb2dyZXNzXCIsIHBhcmFtcyA9PiB7XG4gICAgICAgIHNldExvYWRpbmdQZXJjZW50KE1hdGguZmxvb3IoKHBhcmFtcy5pdGVyYXRpb25zIC8gcGFyYW1zLnRvdGFsKSAqIDEwMCkpXG4gICAgICB9KVxuICAgIH0sXG4gICAgW25ldHdvcmssIHZpc05ldHdvcmssIG9uU2VsZWN0QWNjb3VudCwgb25TZWxlY3RUcnVzdGxpbmVdXG4gIClcblxuICB1c2VFZmZlY3QoXG4gICAgZnVuY3Rpb24gZmV0Y2hEYXRhKCkge1xuICAgICAgaWYgKCF2aXNOZXR3b3JrKSByZXR1cm5cbiAgICAgIGNvbnNvbGUubG9nKFwiSW5pdCBmZXRjaFwiKVxuICAgICAgdmlzTmV0d29yay5zZXREYXRhKHt9KVxuICAgICAgc2V0TG9hZGluZ1BlcmNlbnQoMClcbiAgICAgIHNldE51bVRyYW5zZmVycygwKVxuICAgICAgc2V0TnVtVXNlcnMoMClcbiAgICAgIGxldCBub2RlU2V0ID0gbnVsbFxuICAgICAgbGV0IGVkZ2VTZXQgPSBudWxsXG4gICAgICBsZXQgZmluaXNoZWRMb2FkaW5nID0gdHJ1ZVxuXG4gICAgICBmdW5jdGlvbiBzdGFydEZldGNoRGF0YSgpIHtcbiAgICAgICAgbGV0IGZyb21CbG9jayA9IDBcblxuICAgICAgICBhc3luYyBmdW5jdGlvbiBfZmV0Y2hNb3JlRGF0YSgpIHtcbiAgICAgICAgICBpZiAoIWZpbmlzaGVkTG9hZGluZykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTa2lwIGZldGNoaW5nLCBiZWNhdXNlIG9sZCBzdGlsbCBpbiBwcm9ncmVzc1wiKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGZpbmlzaGVkTG9hZGluZyA9IGZhbHNlXG4gICAgICAgICAgY29uc29sZS5sb2coXCJGZXRjaCBldmVudHMgZnJvbSBibG9jayBcIiwgZnJvbUJsb2NrKVxuICAgICAgICAgIGxldCBldmVudHMgPSBhd2FpdCBmZXRjaF9lbmRwb2ludChcbiAgICAgICAgICAgIHByb2Nlc3MuZW52LlJFQUNUX0FQUF9SRUxBWV9VUkwgK1xuICAgICAgICAgICAgICBgL2FwaS92MS9uZXR3b3Jrcy8ke25ldHdvcmsuYWRkcmVzc30vZXZlbnRzP2Zyb21CbG9jaz0ke2Zyb21CbG9ja31gXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgaWYgKGV2ZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm8gbmV3IGV2ZW50c1wiKVxuICAgICAgICAgICAgc2V0TGFzdFVwZGF0ZVRpbWVzdGFtcChEYXRlLm5vdygpKVxuICAgICAgICAgICAgZmluaXNoZWRMb2FkaW5nID0gdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGV2ZW50TWFwID0gZmlsdGVyRXZlbnRzKGV2ZW50cywge1xuICAgICAgICAgICAgVHJ1c3RsaW5lVXBkYXRlOiBcInRydXN0bGluZVVwZGF0ZUV2ZW50c1wiLFxuICAgICAgICAgICAgVHJhbnNmZXI6IFwidHJhbnNmZXJFdmVudHNcIixcbiAgICAgICAgICB9KVxuICAgICAgICAgIGNvbnN0IFtub2RlcywgZWRnZXNdID0gYnVpbGRfZ3JhcGgoZXZlbnRNYXAudHJ1c3RsaW5lVXBkYXRlRXZlbnRzKVxuXG4gICAgICAgICAgaWYgKG5vZGVTZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJJbml0IG5ldHdvcmsgZGF0YVwiKVxuICAgICAgICAgICAgbm9kZVNldCA9IG5ldyB2aXMuRGF0YVNldChub2RlcylcbiAgICAgICAgICAgIGVkZ2VTZXQgPSBuZXcgdmlzLkRhdGFTZXQoZWRnZXMpXG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICBub2Rlczogbm9kZVNldCxcbiAgICAgICAgICAgICAgZWRnZXM6IGVkZ2VTZXQsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2aXNOZXR3b3JrLnNldERhdGEoZGF0YSlcbiAgICAgICAgICAgIHZpc05ldHdvcmsub25jZShcInN0YWJpbGl6YXRpb25JdGVyYXRpb25zRG9uZVwiLCBwYXJhbXMgPT4ge1xuICAgICAgICAgICAgICBmaW5pc2hlZExvYWRpbmcgPSB0cnVlXG4gICAgICAgICAgICAgIHNldExvYWRpbmdQZXJjZW50KDEwMClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVXBkYXRlIG5ldHdvcmsgZGF0YVwiKVxuICAgICAgICAgICAgbm9kZVNldC51cGRhdGUobm9kZXMpXG4gICAgICAgICAgICBlZGdlU2V0LnVwZGF0ZShlZGdlcylcbiAgICAgICAgICAgIGZpbmlzaGVkTG9hZGluZyA9IHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXROdW1UcmFuc2ZlcnMoXG4gICAgICAgICAgICBudW1UcmFuc2ZlcnMgPT4gbnVtVHJhbnNmZXJzICsgZXZlbnRNYXAudHJhbnNmZXJFdmVudHMubGVuZ3RoXG4gICAgICAgICAgKVxuICAgICAgICAgIHNldE51bVVzZXJzKG5vZGVTZXQubGVuZ3RoKVxuICAgICAgICAgIHNldExhc3RVcGRhdGVUaW1lc3RhbXAoRGF0ZS5ub3coKSlcbiAgICAgICAgICBmcm9tQmxvY2sgPSBldmVudHNbZXZlbnRzLmxlbmd0aCAtIDFdLmJsb2NrTnVtYmVyICsgMVxuICAgICAgICB9XG5cbiAgICAgICAgX2ZldGNoTW9yZURhdGEoKVxuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwoX2ZldGNoTW9yZURhdGEsIFVQREFURV9JTlRFUlZBTClcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW50ZXJ2YWxJZCA9IHN0YXJ0RmV0Y2hEYXRhKClcblxuICAgICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZClcbiAgICB9LFxuICAgIFt2aXNOZXR3b3JrLCBuZXR3b3JrXVxuICApXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjEwMCVcIiB9fT5cbiAgICAgIDxOZXR3b3JrSW5mb1xuICAgICAgICBuZXR3b3JrU3RhdGljPXtuZXR3b3JrfVxuICAgICAgICBudW1Vc2Vycz17bnVtVXNlcnN9XG4gICAgICAgIG51bVRyYW5zZmVycz17bnVtVHJhbnNmZXJzfVxuICAgICAgLz5cbiAgICAgIGxhc3QgdXBkYXRlZDogPERpZmZUaW1lIHRpbWVzdGFtcD17bGFzdFVwZGF0ZVRpbWVzdGFtcH0gLz5cbiAgICAgIHtsb2FkaW5nUGVyY2VudCAhPT0gMTAwICYmIChcbiAgICAgICAgPHByb2dyZXNzXG4gICAgICAgICAgY2xhc3NOYW1lPVwicHJvZ3Jlc3MgbXktcHJvZ3Jlc3MgaXMtaW5mb1wiXG4gICAgICAgICAgdmFsdWU9e2xvYWRpbmdQZXJjZW50fVxuICAgICAgICAgIG1heD1cIjEwMFwiXG4gICAgICAgID5cbiAgICAgICAgICB7bG9hZGluZ1BlcmNlbnR9JVxuICAgICAgICA8L3Byb2dyZXNzPlxuICAgICAgKX1cbiAgICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6IFwiMTAwJVwiLCBoZWlnaHQ6IFwiOTAlXCIgfX0gcmVmPXtjb250YWluZXJ9IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmV0d29ya1xuIiwiLy8gdGhvc2UgbmV0d29ya3Mgd2VyZSBmcm96ZW4gb24gdGhlIDE1LjAyLjIwMjEgYW5kIHdlXG4vLyBubyBsb25nZXIgbmVlZCB0byBzaG93IHN0YXRzIGZvciB0aGVtXG5leHBvcnQgY29uc3QgZnJvemVuTmV0d29ya3MgPSBbXG4gICAgXCIweDEyNjU3MTI4ZDdmYTQyOTE2NDdlQzNiMDE0N0U1ZkE2RWViRDM4OEFcIixcbiAgICBcIjB4RjIzMjBhNTM3MURBM0NCOTY3QjkzNTU1OTdBQTdhZEVjMTdFNDIyMFwiLFxuICAgIFwiMHgxOEJEQzczNmIyM0ZmNzI5NEJFRDlmYTk4OGExNDQzMzU3QzdCMGVkXCIsXG4gICAgXCIweDBBNmYwQzU0MUJlNTQyYzA5OEI3RWUwM0M5QzYzNGYyMEJDZjg0MjJcIixcbiAgICBcIjB4MDE1NjRhNGI3QzMyN2M4NDc2M0Q3ZkNmNjI5QjAyNTg0QUU3Mjk3M1wiLFxuICAgIFwiMHg4QjJjMGU0M0Y2OWE4YTI1Yzk0NTEwY0M4NTEzODI2MGJiMjRlMzgxXCIsXG4gICAgXCIweDdBNjA0OWIzQTk2RTdhNkQ2OGU2ZTY4MTNhMTk1OTRFYTMzNmQwODBcIixcbiAgICBcIjB4QjU3Qzk2MEVlNzYwY0RhODE4NEM5QzlkOWI3RDBGZUJFNDU1NzYxNlwiLFxuICAgIFwiMHg4MzA2ZTIyOWVhNkVkZjNhRDI2NzA2ODE5MTJDY0MwQzMzOGY3OTYzXCIsXG4gICAgXCIweDcwZDRkYjRlQzU2YjM5OEQ3Y2JBMzY2NjgzNTQ5MGNiMGUzOWYwMDhcIixcbiAgICBcIjB4MDQ5RDgxNEVEMjJiRUE0Mzk0YUMyRWM0OGJhY2U4QTFlMzFCQzM3NlwiLFxuICAgIFwiMHhjMzc5MEE2ZGYwODAzODFlYmYzZUY5QmVCMzVlNmI3MDQzMWJCNDIwXCIsXG4gICAgXCIweGE4MURFNERBMjUyRTAxMmE1ZThiMEZlMUZFOTFCQjBhNTVEYzVmOWRcIixcbiAgICBcIjB4QjM2NTY5NGRCMDk2MUZlODFjQTVlMjk2YzEyNTBkMjRhNEVlNjI3ZlwiLFxuICAgIFwiMHgxQTY0QmQ1ZTk1NkRBOTNFOTEyQ0I3ZWI5YjAwQjhEMkJjOTAxNUY5XCIsXG4gICAgXCIweDcxNGRhYkQ3OUI3OTYyZEE0N2M4ZkVBNDQ2MDY0NTIzQ0UwNDU2ZkVcIixcbiAgICBcIjB4QzBmMTAzMGQ4M0FFRUYxNjE2ZGVlZjA2MDExNEUzMUIzQTI1RGU4MVwiLFxuICAgIFwiMHgxNTkzMzcxOEUyZTM0NzhlNzU2QzEzZDUxNmY3ZjRmNEY3NDliM0Q2XCIsXG4gICAgXCIweDc3NjI2NDU5MjQwYjgxMDVEZUM3MGRDOTdENjE0NDE5MjRmMTY2RGZcIixcbiAgICBcIjB4MjY0QjE3NzVDZTVkMjgzMTYwODU3NTk3NENmQjlFQjlGOEY2NTlmNVwiLFxuICAgIFwiMHhiMkIzQTBFOTU4ZTNlRWIzMzNiNzM0QUJGMzRBQ0EyZEI1Yjk0QjhGXCIsXG4gICAgXCIweEEzMWZBM0Q4RGFFQmMxZDdmYjkxYTZGNUY2ODA1ODczZEM5NThGZjJcIixcbiAgICBcIjB4NjAzZjIyQjFEMzg1NGI5ODVFMGE2MUNlNGMwMzQ5NTM0YTBlNTY3M1wiLFxuICAgIFwiMHg1Rjc0ZUQ3MjE1ODU2NmMwNTMyOEViODE1NTQ0NDYxYkQwYjQ1MTE2XCIsXG4gICAgXCIweDdBYzNmQzFDNDI4ZGY5OUQ4MWQ5YjY0NDEwNkZGNjdjNDRBMTU1YUFcIixcbiAgICBcIjB4ZWY1YkMwMWRhOUFDOEIzMkY3OGRDODQ3RDg0NDU0RTQ4NTEwRWY3MlwiLFxuICAgIFwiMHg5NzY2OEUwN2MxMjJmNzcwMWI4MDRBNGVBNmZkMTk2RjFlMjY0NDIzXCIsXG4gICAgXCIweDU3YzRhMmNDRjJDQzk5ZjNkRjc4NTU0NjVkMTUyOEMxMTBGZjRGMTRcIixcbiAgICBcIjB4YTgwOUQ1ZTc0MEFBMzI0RkY5NDc1MTgzNmIxZDdBYTZCQTJkZTgxRVwiLFxuICAgIFwiMHhGNDU1YzQ2ODIzQ2RiNUE4OTkyMTdBMGYwODU1MjU4NzRiQTE5NEE4XCIsXG4gICAgXCIweGM4YTBhM2FBM0E5OEYyNzE5OERlMTI2Mzc5Mzg2RDhhQTdEMDE5NTBcIixcbiAgICBcIjB4Q2FhNUIwNGU2RTQ0RUMzMTA2RUVCZEFBZDdENkM3YkU5MzcwQmUzMlwiLFxuICAgIFwiMHgyNDIxQTJlYTdCMjRiNUQyNjE3N0I3OGFmY2Y4RjRCNDAyNTUzMjRkXCIsXG4gICAgXCIweDJhQjNmNDY5RDA0MWFFNjhGNDViM0MyNTVCN0NCNDYzNzBGZmZmRjVcIixcbiAgICBcIjB4MDNGRTJBNmE1ODllMzNiN2QzY0Q4MjA4NzA1MDkyQkU1NzJBNzZkMVwiLFxuICAgIFwiMHhGZTU0Q2JiMjM0MTQ0NjdDY0MwNTJkQUNBMWVjYzkwODc0NUQ3MUViXCIsXG4gICAgXCIweDRENGRkNzFBODE4RDRGN2QzMzQ5RjkzNjM4MmVhNzA5NzkxMjNGODFcIixcbiAgICBcIjB4Q0M2MDM5ZTA2ODE1NDgwMDJiY0YzOWJmNjVkNDQ0YmVENjU5ODBCMFwiLFxuICAgIFwiMHg4MjFiNzcwYTRiNUQxMjI4MzIyQjJBMkJiMjkzNTRiNWZhYWJEMjlGXCIsXG4gICAgXCIweDg2RDUwRTk0ZTZCYTRCOTlDNWMxOTQzOWMxM2EwN0U1QjdjMjMxZjlcIixcbiAgICBcIjB4NjIxMkMyNzgzQjJhY0NBODQ2OGIxYmVmYjE5YTRhQWNjYjNjNDk3MFwiLFxuICAgIFwiMHg0QjFDZTk5MkIwNDUzOTc4NkRGMTlkREM0MTY0OTBjZDY1OTVEQjAxXCIsXG4gICAgXCIweDg1ODgxNzNFMDMyMjA4OUVmZTg1MWIxNGQwNDFhQzE1QUM5OTFDMDdcIixcbiAgICBcIjB4Y2IwMmEwOGE3MkNiNDU5ZkU0MUU5ODcwNjVmRTFFMkQ3NDM4RTY0RVwiLFxuICAgIFwiMHgwRmJENTZlMzg0ODI2MjQ2ZEM3OTVDMUExOTUxYzc4MTE4NEY4ZmFhXCIsXG5dXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuXG5pbXBvcnQgeyBmZXRjaF9lbmRwb2ludCB9IGZyb20gXCIuL2FwaS5qc1wiXG5cbmltcG9ydCBcIi4vTmV0d29ya1NlbGVjdC5jc3NcIlxuaW1wb3J0IHsgZnJvemVuTmV0d29ya3MgfSBmcm9tIFwiLi9mcm96ZW5OZXR3b3Jrc1wiO1xuXG5mdW5jdGlvbiBOZXR3b3JrU2VsZWN0KHsgb25OZXR3b3JrU2VsZWN0IH0pIHtcbiAgY29uc3QgW25ldHdvcmtzLCBzZXROZXR3b3Jrc10gPSB1c2VTdGF0ZShbXSlcbiAgY29uc3QgW3NlbGVjdGVkQWRkcmVzcywgc2V0U2VsZWN0ZWRBZGRyZXNzXSA9IHVzZVN0YXRlKG51bGwpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhc3luYyBmdW5jdGlvbiBfZmV0Y2goKSB7XG4gICAgICBsZXQgbmV0d29ya3MgPSBhd2FpdCBmZXRjaF9lbmRwb2ludChcbiAgICAgICAgcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1JFTEFZX1VSTCArIGAvYXBpL3YxL25ldHdvcmtzYFxuICAgICAgKVxuXG4gICAgICBuZXR3b3JrcyA9IG5ldHdvcmtzLmZpbHRlcihuZXR3b3JrID0+ICFmcm96ZW5OZXR3b3Jrcy5pbmNsdWRlcyhuZXR3b3JrLmFkZHJlc3MpKVxuXG4gICAgICBuZXR3b3Jrcy5zb3J0KFxuICAgICAgICAobmV0d29ya0EsIG5ldHdvcmtCKSA9PiBuZXR3b3JrQi5udW1Vc2VycyAtIG5ldHdvcmtBLm51bVVzZXJzXG4gICAgICApXG4gICAgICBzZXROZXR3b3JrcyhuZXR3b3JrcylcbiAgICB9XG4gICAgX2ZldGNoKClcbiAgICBjb25zdCBpZCA9IHNldEludGVydmFsKF9mZXRjaCwgMTAwMDApXG4gICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaWQpXG4gIH0sIFtdKVxuXG4gIGNvbnN0IHNlbGVjdE5ldHdvcmsgPSB1c2VDYWxsYmFjayhcbiAgICBuZXR3b3JrID0+IHtcbiAgICAgIHNldFNlbGVjdGVkQWRkcmVzcyhuZXR3b3JrLmFkZHJlc3MpXG4gICAgICBvbk5ldHdvcmtTZWxlY3QobmV0d29yaylcbiAgICB9LFxuICAgIFtvbk5ldHdvcmtTZWxlY3QsIHNldFNlbGVjdGVkQWRkcmVzc11cbiAgKVxuXG4gIHJldHVybiAoXG4gICAgPGFzaWRlIGNsYXNzTmFtZT17XCJtZW51IG15LW1lbnVcIn0+XG4gICAgICA8cCBjbGFzc05hbWU9e1wibWVudS1sYWJlbFwifT5OZXR3b3JrczwvcD5cbiAgICAgIDx1bD5cbiAgICAgICAge25ldHdvcmtzLm1hcChuZXR3b3JrID0+IChcbiAgICAgICAgICA8bGkga2V5PXtuZXR3b3JrLmFkZHJlc3N9PlxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2VsZWN0TmV0d29yayhuZXR3b3JrKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcbiAgICAgICAgICAgICAgICBcImxpc3QtaXRlbSBcIiArXG4gICAgICAgICAgICAgICAgKHNlbGVjdGVkQWRkcmVzcyA9PT0gbmV0d29yay5hZGRyZXNzID8gXCJpcy1hY3RpdmVcIiA6IFwiXCIpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge25ldHdvcmsubmFtZX0gKHtuZXR3b3JrLm51bVVzZXJzfSlcbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICApKX1cbiAgICAgIDwvdWw+XG4gICAgPC9hc2lkZT5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZXR3b3JrU2VsZWN0XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgQmlnTnVtYmVyIGZyb20gXCJiaWdudW1iZXIuanNcIlxuXG5pbXBvcnQgeyBmZXRjaF9lbmRwb2ludCB9IGZyb20gXCIuL2FwaS5qc1wiXG5cbmZ1bmN0aW9uIGZvcm1hdF9udW0odmFsdWUsIG5ldHdvcmspIHtcbiAgY29uc3QgbnVtID0gbmV3IEJpZ051bWJlcih2YWx1ZSkuZGl2KG5ldyBCaWdOdW1iZXIoMTApLnBvdyhuZXR3b3JrLmRlY2ltYWxzKSlcbiAgcmV0dXJuIGAke251bX0gJHtuZXR3b3JrLmFiYnJldmlhdGlvbn1gXG59XG5cbmZ1bmN0aW9uIFRydXN0bGluZSh7IG5ldHdvcmssIGZyb20sIHRvIH0pIHtcbiAgY29uc3QgW3RydXN0bGluZSwgc2V0VHJ1c3RsaW5lXSA9IHVzZVN0YXRlKHt9KVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYXN5bmMgZnVuY3Rpb24gX2ZldGNoKCkge1xuICAgICAgY29uc3QgdHJ1c3RsaW5lID0gYXdhaXQgZmV0Y2hfZW5kcG9pbnQoXG4gICAgICAgIHByb2Nlc3MuZW52LlJFQUNUX0FQUF9SRUxBWV9VUkwgK1xuICAgICAgICAgIGAvYXBpL3YxL25ldHdvcmtzLyR7bmV0d29yay5hZGRyZXNzfS91c2Vycy8ke2Zyb219L3RydXN0bGluZXMvJHt0b31gXG4gICAgICApXG4gICAgICBzZXRUcnVzdGxpbmUodHJ1c3RsaW5lKVxuICAgIH1cbiAgICBfZmV0Y2goKVxuICB9LCBbbmV0d29yaywgZnJvbSwgdG9dKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcInRpdGxlXCJ9PlRydXN0bGluZSBEZXRhaWxzPC9kaXY+XG4gICAgICA8dGFibGUgY2xhc3NOYW1lPVwidGFibGVcIj5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD5mcm9tPC90aD5cbiAgICAgICAgICAgIDx0ZD57dHJ1c3RsaW5lLnVzZXJ9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD50bzwvdGg+XG4gICAgICAgICAgICA8dGQ+e3RydXN0bGluZS5jb3VudGVyUGFydHl9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD5DcmVkaXQgZ2l2ZW48L3RoPlxuICAgICAgICAgICAgPHRkPntmb3JtYXRfbnVtKHRydXN0bGluZS5naXZlbiwgbmV0d29yayl9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD5DcmVkaXQgcmVjZWl2ZWQ8L3RoPlxuICAgICAgICAgICAgPHRkPntmb3JtYXRfbnVtKHRydXN0bGluZS5yZWNlaXZlZCwgbmV0d29yayl9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD5CYWxhbmNlPC90aD5cbiAgICAgICAgICAgIDx0ZD57Zm9ybWF0X251bSh0cnVzdGxpbmUuYmFsYW5jZSwgbmV0d29yayl9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcnVzdGxpbmVcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSBcImJpZ251bWJlci5qc1wiXG5cbmltcG9ydCB7IGZldGNoX2VuZHBvaW50IH0gZnJvbSBcIi4vYXBpLmpzXCJcblxuZnVuY3Rpb24gZm9ybWF0X251bSh2YWx1ZSwgbmV0d29yaykge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBcIi4uLlwiXG4gIH1cbiAgY29uc3QgbnVtID0gbmV3IEJpZ051bWJlcih2YWx1ZSkuZGl2KG5ldyBCaWdOdW1iZXIoMTApLnBvdyhuZXR3b3JrLmRlY2ltYWxzKSlcbiAgcmV0dXJuIGAke251bX0gJHtuZXR3b3JrLmFiYnJldmlhdGlvbn1gXG59XG5cbmZ1bmN0aW9uIEFjY291bnQoeyBuZXR3b3JrLCBhZGRyZXNzIH0pIHtcbiAgY29uc3QgW2FjY291bnQsIHNldEFjY291bnRdID0gdXNlU3RhdGUoe30pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhc3luYyBmdW5jdGlvbiBfZmV0Y2goKSB7XG4gICAgICBjb25zdCBhY2NvdW50ID0gYXdhaXQgZmV0Y2hfZW5kcG9pbnQoXG4gICAgICAgIHByb2Nlc3MuZW52LlJFQUNUX0FQUF9SRUxBWV9VUkwgK1xuICAgICAgICAgIGAvYXBpL3YxL25ldHdvcmtzLyR7bmV0d29yay5hZGRyZXNzfS91c2Vycy8ke2FkZHJlc3N9YFxuICAgICAgKVxuICAgICAgc2V0QWNjb3VudChhY2NvdW50KVxuICAgIH1cbiAgICBfZmV0Y2goKVxuICB9LCBbbmV0d29yaywgYWRkcmVzc10pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e1widGl0bGVcIn0+QWNjb3VudCBEZXRhaWxzPC9kaXY+XG4gICAgICA8dGFibGUgY2xhc3NOYW1lPVwidGFibGVcIj5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD5Vc2VyPC90aD5cbiAgICAgICAgICAgIDx0ZD57YWRkcmVzc308L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoPkNyZWRpdCBnaXZlbjwvdGg+XG4gICAgICAgICAgICA8dGQ+e2Zvcm1hdF9udW0oYWNjb3VudC5naXZlbiwgbmV0d29yayl9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD5DcmVkaXQgcmVjZWl2ZWQ8L3RoPlxuICAgICAgICAgICAgPHRkPntmb3JtYXRfbnVtKGFjY291bnQucmVjZWl2ZWQsIG5ldHdvcmspfTwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+QmFsYW5jZTwvdGg+XG4gICAgICAgICAgICA8dGQ+e2Zvcm1hdF9udW0oYWNjb3VudC5iYWxhbmNlLCBuZXR3b3JrKX08L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoPkF2YWlsYWJsZTwvdGg+XG4gICAgICAgICAgICA8dGQ+e2Zvcm1hdF9udW0oYWNjb3VudC5sZWZ0UmVjZWl2ZWQsIG5ldHdvcmspfTwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQWNjb3VudFxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgbW9tZW50IGZyb20gXCJtb21lbnRcIlxuXG5pbXBvcnQgTmV0d29yayBmcm9tIFwiLi9OZXR3b3JrXCJcbmltcG9ydCBOZXR3b3JrU2VsZWN0IGZyb20gXCIuL05ldHdvcmtTZWxlY3RcIlxuaW1wb3J0IFRydXN0bGluZSBmcm9tIFwiLi9UcnVzdGxpbmVcIlxuaW1wb3J0IEFjY291bnQgZnJvbSBcIi4vQWNjb3VudFwiXG5cbmltcG9ydCBcImJ1bG1hL2Nzcy9idWxtYS5jc3NcIlxuaW1wb3J0IFwiLi9BcHAuY3NzXCJcblxubW9tZW50LnJlbGF0aXZlVGltZVRocmVzaG9sZChcInNzXCIsIDEwKVxuXG5mdW5jdGlvbiBBcHAoKSB7XG4gIGNvbnN0IFtuZXR3b3JrLCBzZXROZXR3b3JrXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFt0cnVzdGxpbmUsIHNldFRydXN0bGluZV0gPSB1c2VTdGF0ZShudWxsKVxuICBjb25zdCBbYWNjb3VudCwgc2V0QWNjb3VudF0gPSB1c2VTdGF0ZShudWxsKVxuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdE5ldHdvcmsgPSB1c2VDYWxsYmFjayhuZXR3b3JrID0+IHtcbiAgICBzZXRUcnVzdGxpbmUobnVsbClcbiAgICBzZXRBY2NvdW50KG51bGwpXG4gICAgc2V0TmV0d29yayhuZXR3b3JrKVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtcIm15Y29udGFpbmVyIGNvbHVtbnNcIn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17XCJjb2x1bW4gaXMtbmFycm93XCJ9PlxuICAgICAgICA8TmV0d29ya1NlbGVjdCBvbk5ldHdvcmtTZWxlY3Q9e2hhbmRsZVNlbGVjdE5ldHdvcmt9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImNvbHVtbiBpcy10aHJlZS1xdWFydGVyXCJ9PlxuICAgICAgICB7bmV0d29yayA/IChcbiAgICAgICAgICA8TmV0d29ya1xuICAgICAgICAgICAgbmV0d29yaz17bmV0d29ya31cbiAgICAgICAgICAgIG9uU2VsZWN0VHJ1c3RsaW5lPXtzZXRUcnVzdGxpbmV9XG4gICAgICAgICAgICBvblNlbGVjdEFjY291bnQ9e3NldEFjY291bnR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJoYXMtdGV4dC1jZW50ZXJlZFwifT5TZWxlY3QgYSBuZXR3b3JrPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImNvbHVtbiBpcy1vbmUtcXVhcnRlclwifT5cbiAgICAgICAge3RydXN0bGluZSA/IChcbiAgICAgICAgICA8VHJ1c3RsaW5lXG4gICAgICAgICAgICBuZXR3b3JrPXtuZXR3b3JrfVxuICAgICAgICAgICAgZnJvbT17dHJ1c3RsaW5lLmZyb219XG4gICAgICAgICAgICB0bz17dHJ1c3RsaW5lLnRvfVxuICAgICAgICAgIC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiaGFzLXRleHQtY2VudGVyZWRcIn0+U2VsZWN0IGEgdHJ1c3RsaW5lPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAge2FjY291bnQgPyAoXG4gICAgICAgICAgPEFjY291bnQgbmV0d29yaz17bmV0d29ya30gYWRkcmVzcz17YWNjb3VudH0gLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJoYXMtdGV4dC1jZW50ZXJlZFwifT5TZWxlY3QgYW4gYWNjb3VudDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwXG4iLCIvLyBUaGlzIG9wdGlvbmFsIGNvZGUgaXMgdXNlZCB0byByZWdpc3RlciBhIHNlcnZpY2Ugd29ya2VyLlxuLy8gcmVnaXN0ZXIoKSBpcyBub3QgY2FsbGVkIGJ5IGRlZmF1bHQuXG5cbi8vIFRoaXMgbGV0cyB0aGUgYXBwIGxvYWQgZmFzdGVyIG9uIHN1YnNlcXVlbnQgdmlzaXRzIGluIHByb2R1Y3Rpb24sIGFuZCBnaXZlc1xuLy8gaXQgb2ZmbGluZSBjYXBhYmlsaXRpZXMuIEhvd2V2ZXIsIGl0IGFsc28gbWVhbnMgdGhhdCBkZXZlbG9wZXJzIChhbmQgdXNlcnMpXG4vLyB3aWxsIG9ubHkgc2VlIGRlcGxveWVkIHVwZGF0ZXMgb24gc3Vic2VxdWVudCB2aXNpdHMgdG8gYSBwYWdlLCBhZnRlciBhbGwgdGhlXG4vLyBleGlzdGluZyB0YWJzIG9wZW4gb24gdGhlIHBhZ2UgaGF2ZSBiZWVuIGNsb3NlZCwgc2luY2UgcHJldmlvdXNseSBjYWNoZWRcbi8vIHJlc291cmNlcyBhcmUgdXBkYXRlZCBpbiB0aGUgYmFja2dyb3VuZC5cblxuLy8gVG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgYmVuZWZpdHMgb2YgdGhpcyBtb2RlbCBhbmQgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0b1xuLy8gb3B0LWluLCByZWFkIGh0dHBzOi8vYml0Lmx5L0NSQS1QV0FcblxuY29uc3QgaXNMb2NhbGhvc3QgPSBCb29sZWFuKFxuICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09IFwibG9jYWxob3N0XCIgfHxcbiAgICAvLyBbOjoxXSBpcyB0aGUgSVB2NiBsb2NhbGhvc3QgYWRkcmVzcy5cbiAgICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09IFwiWzo6MV1cIiB8fFxuICAgIC8vIDEyNy4wLjAuMC84IGFyZSBjb25zaWRlcmVkIGxvY2FsaG9zdCBmb3IgSVB2NC5cbiAgICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUubWF0Y2goXG4gICAgICAvXjEyNyg/OlxcLig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykpezN9JC9cbiAgICApXG4pXG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlcihjb25maWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiAmJiBcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcbiAgICAvLyBUaGUgVVJMIGNvbnN0cnVjdG9yIGlzIGF2YWlsYWJsZSBpbiBhbGwgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IFNXLlxuICAgIGNvbnN0IHB1YmxpY1VybCA9IG5ldyBVUkwocHJvY2Vzcy5lbnYuUFVCTElDX1VSTCwgd2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgaWYgKHB1YmxpY1VybC5vcmlnaW4gIT09IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pIHtcbiAgICAgIC8vIE91ciBzZXJ2aWNlIHdvcmtlciB3b24ndCB3b3JrIGlmIFBVQkxJQ19VUkwgaXMgb24gYSBkaWZmZXJlbnQgb3JpZ2luXG4gICAgICAvLyBmcm9tIHdoYXQgb3VyIHBhZ2UgaXMgc2VydmVkIG9uLiBUaGlzIG1pZ2h0IGhhcHBlbiBpZiBhIENETiBpcyB1c2VkIHRvXG4gICAgICAvLyBzZXJ2ZSBhc3NldHM7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvMjM3NFxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHN3VXJsID0gYCR7cHJvY2Vzcy5lbnYuUFVCTElDX1VSTH0vc2VydmljZS13b3JrZXIuanNgXG5cbiAgICAgIGlmIChpc0xvY2FsaG9zdCkge1xuICAgICAgICAvLyBUaGlzIGlzIHJ1bm5pbmcgb24gbG9jYWxob3N0LiBMZXQncyBjaGVjayBpZiBhIHNlcnZpY2Ugd29ya2VyIHN0aWxsIGV4aXN0cyBvciBub3QuXG4gICAgICAgIGNoZWNrVmFsaWRTZXJ2aWNlV29ya2VyKHN3VXJsLCBjb25maWcpXG5cbiAgICAgICAgLy8gQWRkIHNvbWUgYWRkaXRpb25hbCBsb2dnaW5nIHRvIGxvY2FsaG9zdCwgcG9pbnRpbmcgZGV2ZWxvcGVycyB0byB0aGVcbiAgICAgICAgLy8gc2VydmljZSB3b3JrZXIvUFdBIGRvY3VtZW50YXRpb24uXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgXCJUaGlzIHdlYiBhcHAgaXMgYmVpbmcgc2VydmVkIGNhY2hlLWZpcnN0IGJ5IGEgc2VydmljZSBcIiArXG4gICAgICAgICAgICAgIFwid29ya2VyLiBUbyBsZWFybiBtb3JlLCB2aXNpdCBodHRwczovL2JpdC5seS9DUkEtUFdBXCJcbiAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJcyBub3QgbG9jYWxob3N0LiBKdXN0IHJlZ2lzdGVyIHNlcnZpY2Ugd29ya2VyXG4gICAgICAgIHJlZ2lzdGVyVmFsaWRTVyhzd1VybCwgY29uZmlnKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJWYWxpZFNXKHN3VXJsLCBjb25maWcpIHtcbiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcbiAgICAucmVnaXN0ZXIoc3dVcmwpXG4gICAgLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgIHJlZ2lzdHJhdGlvbi5vbnVwZGF0ZWZvdW5kID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBpbnN0YWxsaW5nV29ya2VyID0gcmVnaXN0cmF0aW9uLmluc3RhbGxpbmdcbiAgICAgICAgaWYgKGluc3RhbGxpbmdXb3JrZXIgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGluc3RhbGxpbmdXb3JrZXIub25zdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoaW5zdGFsbGluZ1dvcmtlci5zdGF0ZSA9PT0gXCJpbnN0YWxsZWRcIikge1xuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIHVwZGF0ZWQgcHJlY2FjaGVkIGNvbnRlbnQgaGFzIGJlZW4gZmV0Y2hlZCxcbiAgICAgICAgICAgICAgLy8gYnV0IHRoZSBwcmV2aW91cyBzZXJ2aWNlIHdvcmtlciB3aWxsIHN0aWxsIHNlcnZlIHRoZSBvbGRlclxuICAgICAgICAgICAgICAvLyBjb250ZW50IHVudGlsIGFsbCBjbGllbnQgdGFicyBhcmUgY2xvc2VkLlxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBcIk5ldyBjb250ZW50IGlzIGF2YWlsYWJsZSBhbmQgd2lsbCBiZSB1c2VkIHdoZW4gYWxsIFwiICtcbiAgICAgICAgICAgICAgICAgIFwidGFicyBmb3IgdGhpcyBwYWdlIGFyZSBjbG9zZWQuIFNlZSBodHRwczovL2JpdC5seS9DUkEtUFdBLlwiXG4gICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAvLyBFeGVjdXRlIGNhbGxiYWNrXG4gICAgICAgICAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLm9uVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLm9uVXBkYXRlKHJlZ2lzdHJhdGlvbilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgZXZlcnl0aGluZyBoYXMgYmVlbiBwcmVjYWNoZWQuXG4gICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHBlcmZlY3QgdGltZSB0byBkaXNwbGF5IGFcbiAgICAgICAgICAgICAgLy8gXCJDb250ZW50IGlzIGNhY2hlZCBmb3Igb2ZmbGluZSB1c2UuXCIgbWVzc2FnZS5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb250ZW50IGlzIGNhY2hlZCBmb3Igb2ZmbGluZSB1c2UuXCIpXG5cbiAgICAgICAgICAgICAgLy8gRXhlY3V0ZSBjYWxsYmFja1xuICAgICAgICAgICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5vblN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBjb25maWcub25TdWNjZXNzKHJlZ2lzdHJhdGlvbilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBkdXJpbmcgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uOlwiLCBlcnJvcilcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBjaGVja1ZhbGlkU2VydmljZVdvcmtlcihzd1VybCwgY29uZmlnKSB7XG4gIC8vIENoZWNrIGlmIHRoZSBzZXJ2aWNlIHdvcmtlciBjYW4gYmUgZm91bmQuIElmIGl0IGNhbid0IHJlbG9hZCB0aGUgcGFnZS5cbiAgZmV0Y2goc3dVcmwsIHtcbiAgICBoZWFkZXJzOiB7IFwiU2VydmljZS1Xb3JrZXJcIjogXCJzY3JpcHRcIiB9LFxuICB9KVxuICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgIC8vIEVuc3VyZSBzZXJ2aWNlIHdvcmtlciBleGlzdHMsIGFuZCB0aGF0IHdlIHJlYWxseSBhcmUgZ2V0dGluZyBhIEpTIGZpbGUuXG4gICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpXG4gICAgICBpZiAoXG4gICAgICAgIHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0IHx8XG4gICAgICAgIChjb250ZW50VHlwZSAhPSBudWxsICYmIGNvbnRlbnRUeXBlLmluZGV4T2YoXCJqYXZhc2NyaXB0XCIpID09PSAtMSlcbiAgICAgICkge1xuICAgICAgICAvLyBObyBzZXJ2aWNlIHdvcmtlciBmb3VuZC4gUHJvYmFibHkgYSBkaWZmZXJlbnQgYXBwLiBSZWxvYWQgdGhlIHBhZ2UuXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgICByZWdpc3RyYXRpb24udW5yZWdpc3RlcigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNlcnZpY2Ugd29ya2VyIGZvdW5kLiBQcm9jZWVkIGFzIG5vcm1hbC5cbiAgICAgICAgcmVnaXN0ZXJWYWxpZFNXKHN3VXJsLCBjb25maWcpXG4gICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIFwiTm8gaW50ZXJuZXQgY29ubmVjdGlvbiBmb3VuZC4gQXBwIGlzIHJ1bm5pbmcgaW4gb2ZmbGluZSBtb2RlLlwiXG4gICAgICApXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXIoKSB7XG4gIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeVxuICAgICAgLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uLnVucmVnaXN0ZXIoKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IubWVzc2FnZSlcbiAgICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIlxuaW1wb3J0IFwiLi9pbmRleC5jc3NcIlxuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIlxuaW1wb3J0ICogYXMgc2VydmljZVdvcmtlciBmcm9tIFwiLi9zZXJ2aWNlV29ya2VyXCJcblxuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSlcblxuLy8gSWYgeW91IHdhbnQgeW91ciBhcHAgdG8gd29yayBvZmZsaW5lIGFuZCBsb2FkIGZhc3RlciwgeW91IGNhbiBjaGFuZ2Vcbi8vIHVucmVnaXN0ZXIoKSB0byByZWdpc3RlcigpIGJlbG93LiBOb3RlIHRoaXMgY29tZXMgd2l0aCBzb21lIHBpdGZhbGxzLlxuLy8gTGVhcm4gbW9yZSBhYm91dCBzZXJ2aWNlIHdvcmtlcnM6IGh0dHBzOi8vYml0Lmx5L0NSQS1QV0FcbnNlcnZpY2VXb3JrZXIudW5yZWdpc3RlcigpXG4iXSwic291cmNlUm9vdCI6IiJ9